{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///brambl.min.js","webpack:///webpack/bootstrap 72a0fe3005aa5a5cda99","webpack:///./src/bundle.js","webpack:///./src/js/brambl.graph.js","webpack:///./~/d3-force/build/d3-force.js","webpack:///./~/d3-quadtree/build/d3-quadtree.js","webpack:///./~/d3-collection/build/d3-collection.js","webpack:///./~/d3-dispatch/build/d3-dispatch.js","webpack:///./~/d3-timer/build/d3-timer.js","webpack:///./src/js/renderers/brambl.node.renderer.js","webpack:///./src/js/renderers/brambl.edge.renderer.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Graph","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","d3","renderNode","renderEdge","selector","data","arguments","undefined","options","nodes","edges","canvas","document","querySelector","simulation","context","graph","getContext","value","_this","forceSimulation","force","forceLink","d","forceManyBody","forceCenter","width","height","links","distance","on","render","stop","_this2","clearRect","beginPath","forEach","stroke","fill","global","d3Quadtree","d3Collection","d3Dispatch","d3Timer","center","x","y","node","n","sx","sy","initialize","_","constant","jiggle","Math","random","vx","vy","collide","radius","apply","quad","x0","y0","x1","y1","rj","r","ri","xi","yi","index","l","sqrt","strength","ri2","tree","k","iterations","quadtree","visitAfter","prepare","radii","visit","Array","link","defaultStrength","min","count","source","alpha","b","distances","strengths","bias","nodeById","map","get","initializeStrength","initializeDistance","x$1","y$1","step","tick","event","alphaMin","stepper","alphaTarget","alphaDecay","forces","each","fx","velocityDecay","fy","initializeNodes","isNaN","initialRadius","angle","initialAngle","cos","sin","initializeForce","pow","timer","dispatch","restart","name","remove","set","find","dx","dy","d2","closest","Infinity","manyBody","accumulate","q","next","x2","w","theta2","distanceMax2","distanceMin2","distanceMin","distanceMax","theta","x$2","xz","y$2","yz","PI","forceCollide","forceX","forceY","tree_add","_x","_y","add","cover","parent","xm","ym","xp","yp","right","bottom","j","_root","leaf","_x0","_y0","_x1","_y1","addAll","tree_cover","floor","z","tree_data","push","tree_extent","Quad","tree_find","y2","x3","y3","quads","pop","tree_remove","retainer","previous","removeAll","tree_root","tree_size","size","tree_visit","callback","child","tree_visitAfter","defaultX","tree_x","defaultY","tree_y","Quadtree","NaN","leaf_copy","copy","treeProto","extent","Map","object","f","isArray","o","nest","array","depth","createResult","setResult","keys","rollup","sortValues","sort","keyValue","values","valuesByKey","result","entries","sortKey","sortKeys","v","a","createObject","setObject","createMap","setMap","order","Set","prefix","constructor","has","property","clear","slice","empty","proto","t","Error","Dispatch","parseTypenames","typenames","types","trim","split","indexOf","hasOwnProperty","type","noop","concat","typename","T","that","args","now","clockNow","setFrame","clearNow","clock","clockSkew","Timer","_call","_time","_next","delay","time","timerFlush","frame","e","taskHead","wake","clockLast","timeout","nap","poke","pokeDelay","t0","t2","t1","taskTail","sleep","clearTimeout","setTimeout","interval","clearInterval","setInterval","timeout$1","elapsed","interval$1","total","performance","Date","requestAnimationFrame","ctx","moveTo","arc","lineTo"],"mappings":"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","file":"brambl.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Brambl\"] = factory();\n\telse\n\t\troot[\"Brambl\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Brambl\"] = factory();\n\telse\n\t\troot[\"Brambl\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// Main export\n\tmodule.exports = {\n\t  Graph: __webpack_require__(1)\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(2);\n\tvar renderNode = __webpack_require__(7);\n\tvar renderEdge = __webpack_require__(8);\n\t\n\tvar Graph = function () {\n\t\n\t  /* Create an instance of a brambl \n\t   *\n\t   */\n\t  function Graph(selector) {\n\t    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t    _classCallCheck(this, Graph);\n\t\n\t    this.selector = selector;\n\t    this.options = options;\n\t    this.nodes = data.nodes || [];\n\t    this.edges = data.edges || [];\n\t    this.canvas = document.querySelector(selector);\n\t    this.simulation = null;\n\t    this.context = graph.canvas.getContext(\"2d\");\n\t  }\n\t\n\t  /**\n\t  * start the simulation\n\t  */\n\t\n\t\n\t  _createClass(Graph, [{\n\t    key: 'start',\n\t    value: function start() {\n\t      var _this = this;\n\t\n\t      this.simulation = d3.forceSimulation().force(\"link\", d3.forceLink().id(function (d) {\n\t        return d.id;\n\t      })).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(this.canvas.width / 2, this.canvas.height / 2));\n\t\n\t      this.simulation.nodes(this.nodes);\n\t\n\t      this.simulation.force(\"link\").links(this.edges).distance(function (d) {\n\t        return 100;\n\t      });\n\t\n\t      this.simulation.on(\"tick\", function () {\n\t        return _this.render();\n\t      });\n\t    }\n\t\n\t    /**\n\t    * stop the simulation\n\t    */\n\t\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      this.simulation.stop();\n\t    }\n\t\n\t    /**\n\t    * render a frame \n\t    */\n\t\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      this.context.clearRect(0, 0, this.graph.canvas.width, this.graph.canvas.height);\n\t\n\t      this.context.beginPath();\n\t      this.edges.forEach(function (d) {\n\t        return renderEdge(d, _this2.context);\n\t      });\n\t      this.context.stroke();\n\t\n\t      this.context.beginPath();\n\t      this.nodes.forEach(function (d) {\n\t        return renderNode(d, _this2.context);\n\t      });\n\t      this.context.fill();\n\t    }\n\t  }]);\n\t\n\t  return Graph;\n\t}();\n\t\n\tmodule.exports = Graph;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-force/ Version 1.0.2. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports, __webpack_require__(3), __webpack_require__(4), __webpack_require__(5), __webpack_require__(6)) :\n\t  typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\n\t  (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\n\t}(this, function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\n\t\n\t  function center(x, y) {\n\t    var nodes;\n\t\n\t    if (x == null) x = 0;\n\t    if (y == null) y = 0;\n\t\n\t    function force() {\n\t      var i,\n\t          n = nodes.length,\n\t          node,\n\t          sx = 0,\n\t          sy = 0;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i], sx += node.x, sy += node.y;\n\t      }\n\t\n\t      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n\t        node = nodes[i], node.x -= sx, node.y -= sy;\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = +_, force) : x;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = +_, force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function constant(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function jiggle() {\n\t    return (Math.random() - 0.5) * 1e-6;\n\t  }\n\t\n\t  function x(d) {\n\t    return d.x + d.vx;\n\t  }\n\t\n\t  function y(d) {\n\t    return d.y + d.vy;\n\t  }\n\t\n\t  function collide(radius) {\n\t    var nodes,\n\t        radii,\n\t        strength = 1,\n\t        iterations = 1;\n\t\n\t    if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\t\n\t    function force() {\n\t      var i, n = nodes.length,\n\t          tree,\n\t          node,\n\t          xi,\n\t          yi,\n\t          ri,\n\t          ri2;\n\t\n\t      for (var k = 0; k < iterations; ++k) {\n\t        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          ri = radii[i], ri2 = ri * ri;\n\t          xi = node.x + node.vx;\n\t          yi = node.y + node.vy;\n\t          tree.visit(apply);\n\t        }\n\t      }\n\t\n\t      function apply(quad, x0, y0, x1, y1) {\n\t        var data = quad.data, rj = quad.r, r = ri + rj;\n\t        if (data) {\n\t          if (data.index > i) {\n\t            var x = xi - data.x - data.vx,\n\t                y = yi - data.y - data.vy,\n\t                l = x * x + y * y;\n\t            if (l < r * r) {\n\t              if (x === 0) x = jiggle(), l += x * x;\n\t              if (y === 0) y = jiggle(), l += y * y;\n\t              l = (r - (l = Math.sqrt(l))) / l * strength;\n\t              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n\t              node.vy += (y *= l) * r;\n\t              data.vx -= x * (r = 1 - r);\n\t              data.vy -= y * r;\n\t            }\n\t          }\n\t          return;\n\t        }\n\t        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n\t      }\n\t    }\n\t\n\t    function prepare(quad) {\n\t      if (quad.data) return quad.r = radii[quad.data.index];\n\t      for (var i = quad.r = 0; i < 4; ++i) {\n\t        if (quad[i] && quad[i].r > quad.r) {\n\t          quad.r = quad[i].r;\n\t        }\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      var i, n = (nodes = _).length; radii = new Array(n);\n\t      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = +_, force) : strength;\n\t    };\n\t\n\t    force.radius = function(_) {\n\t      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), force) : radius;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function index(d, i) {\n\t    return i;\n\t  }\n\t\n\t  function link(links) {\n\t    var id = index,\n\t        strength = defaultStrength,\n\t        strengths,\n\t        distance = constant(30),\n\t        distances,\n\t        nodes,\n\t        count,\n\t        bias,\n\t        iterations = 1;\n\t\n\t    if (links == null) links = [];\n\t\n\t    function defaultStrength(link) {\n\t      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n\t    }\n\t\n\t    function force(alpha) {\n\t      for (var k = 0, n = links.length; k < iterations; ++k) {\n\t        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n\t          link = links[i], source = link.source, target = link.target;\n\t          x = target.x + target.vx - source.x - source.vx || jiggle();\n\t          y = target.y + target.vy - source.y - source.vy || jiggle();\n\t          l = Math.sqrt(x * x + y * y);\n\t          l = (l - distances[i]) / l * alpha * strengths[i];\n\t          x *= l, y *= l;\n\t          target.vx -= x * (b = bias[i]);\n\t          target.vy -= y * b;\n\t          source.vx += x * (b = 1 - b);\n\t          source.vy += y * b;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t\n\t      var i,\n\t          n = nodes.length,\n\t          m = links.length,\n\t          nodeById = d3Collection.map(nodes, id),\n\t          link;\n\t\n\t      for (i = 0, count = new Array(n); i < n; ++i) {\n\t        count[i] = 0;\n\t      }\n\t\n\t      for (i = 0; i < m; ++i) {\n\t        link = links[i], link.index = i;\n\t        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n\t        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n\t        ++count[link.source.index], ++count[link.target.index];\n\t      }\n\t\n\t      for (i = 0, bias = new Array(m); i < m; ++i) {\n\t        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n\t      }\n\t\n\t      strengths = new Array(m), initializeStrength();\n\t      distances = new Array(m), initializeDistance();\n\t    }\n\t\n\t    function initializeStrength() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        strengths[i] = +strength(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    function initializeDistance() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        distances[i] = +distance(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.links = function(_) {\n\t      return arguments.length ? (links = _, initialize(), force) : links;\n\t    };\n\t\n\t    force.id = function(_) {\n\t      return arguments.length ? (id = _, force) : id;\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n\t    };\n\t\n\t    force.distance = function(_) {\n\t      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$1(d) {\n\t    return d.x;\n\t  }\n\t\n\t  function y$1(d) {\n\t    return d.y;\n\t  }\n\t\n\t  var initialRadius = 10;\n\t  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n\t  function simulation(nodes) {\n\t    var simulation,\n\t        alpha = 1,\n\t        alphaMin = 0.001,\n\t        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n\t        alphaTarget = 0,\n\t        velocityDecay = 0.6,\n\t        forces = d3Collection.map(),\n\t        stepper = d3Timer.timer(step),\n\t        event = d3Dispatch.dispatch(\"tick\", \"end\");\n\t\n\t    if (nodes == null) nodes = [];\n\t\n\t    function step() {\n\t      tick();\n\t      event.call(\"tick\", simulation);\n\t      if (alpha < alphaMin) {\n\t        stepper.stop();\n\t        event.call(\"end\", simulation);\n\t      }\n\t    }\n\t\n\t    function tick() {\n\t      var i, n = nodes.length, node;\n\t\n\t      alpha += (alphaTarget - alpha) * alphaDecay;\n\t\n\t      forces.each(function(force) {\n\t        force(alpha);\n\t      });\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i];\n\t        if (node.fx == null) node.x += node.vx *= velocityDecay;\n\t        else node.x = node.fx, node.vx = 0;\n\t        if (node.fy == null) node.y += node.vy *= velocityDecay;\n\t        else node.y = node.fy, node.vy = 0;\n\t      }\n\t    }\n\t\n\t    function initializeNodes() {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.index = i;\n\t        if (isNaN(node.x) || isNaN(node.y)) {\n\t          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n\t          node.x = radius * Math.cos(angle);\n\t          node.y = radius * Math.sin(angle);\n\t        }\n\t        if (isNaN(node.vx) || isNaN(node.vy)) {\n\t          node.vx = node.vy = 0;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initializeForce(force) {\n\t      if (force.initialize) force.initialize(nodes);\n\t      return force;\n\t    }\n\t\n\t    initializeNodes();\n\t\n\t    return simulation = {\n\t      tick: tick,\n\t\n\t      restart: function() {\n\t        return stepper.restart(step), simulation;\n\t      },\n\t\n\t      stop: function() {\n\t        return stepper.stop(), simulation;\n\t      },\n\t\n\t      nodes: function(_) {\n\t        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n\t      },\n\t\n\t      alpha: function(_) {\n\t        return arguments.length ? (alpha = +_, simulation) : alpha;\n\t      },\n\t\n\t      alphaMin: function(_) {\n\t        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n\t      },\n\t\n\t      alphaDecay: function(_) {\n\t        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n\t      },\n\t\n\t      alphaTarget: function(_) {\n\t        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n\t      },\n\t\n\t      velocityDecay: function(_) {\n\t        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n\t      },\n\t\n\t      force: function(name, _) {\n\t        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n\t      },\n\t\n\t      find: function(x, y, radius) {\n\t        var i = 0,\n\t            n = nodes.length,\n\t            dx,\n\t            dy,\n\t            d2,\n\t            node,\n\t            closest;\n\t\n\t        if (radius == null) radius = Infinity;\n\t        else radius *= radius;\n\t\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          dx = x - node.x;\n\t          dy = y - node.y;\n\t          d2 = dx * dx + dy * dy;\n\t          if (d2 < radius) closest = node, radius = d2;\n\t        }\n\t\n\t        return closest;\n\t      },\n\t\n\t      on: function(name, _) {\n\t        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n\t      }\n\t    };\n\t  }\n\t\n\t  function manyBody() {\n\t    var nodes,\n\t        node,\n\t        alpha,\n\t        strength = constant(-30),\n\t        strengths,\n\t        distanceMin2 = 1,\n\t        distanceMax2 = Infinity,\n\t        theta2 = 0.81;\n\t\n\t    function force(_) {\n\t      var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n\t      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n\t    }\n\t\n\t    function accumulate(quad) {\n\t      var strength = 0, q, c, x, y, i;\n\t\n\t      // For internal nodes, accumulate forces from child quadrants.\n\t      if (quad.length) {\n\t        for (x = y = i = 0; i < 4; ++i) {\n\t          if ((q = quad[i]) && (c = q.value)) {\n\t            strength += c, x += c * q.x, y += c * q.y;\n\t          }\n\t        }\n\t        quad.x = x / strength;\n\t        quad.y = y / strength;\n\t      }\n\t\n\t      // For leaf nodes, accumulate forces from coincident quadrants.\n\t      else {\n\t        q = quad;\n\t        q.x = q.data.x;\n\t        q.y = q.data.y;\n\t        do strength += strengths[q.data.index];\n\t        while (q = q.next);\n\t      }\n\t\n\t      quad.value = strength;\n\t    }\n\t\n\t    function apply(quad, x1, _, x2) {\n\t      if (!quad.value) return true;\n\t\n\t      var x = quad.x - node.x,\n\t          y = quad.y - node.y,\n\t          w = x2 - x1,\n\t          l = x * x + y * y;\n\t\n\t      // Apply the Barnes-Hut approximation if possible.\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (w * w / theta2 < l) {\n\t        if (l < distanceMax2) {\n\t          if (x === 0) x = jiggle(), l += x * x;\n\t          if (y === 0) y = jiggle(), l += y * y;\n\t          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t          node.vx += x * quad.value * alpha / l;\n\t          node.vy += y * quad.value * alpha / l;\n\t        }\n\t        return true;\n\t      }\n\t\n\t      // Otherwise, process points directly.\n\t      else if (quad.length || l >= distanceMax2) return;\n\t\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (quad.data !== node || quad.next) {\n\t        if (x === 0) x = jiggle(), l += x * x;\n\t        if (y === 0) y = jiggle(), l += y * y;\n\t        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t      }\n\t\n\t      do if (quad.data !== node) {\n\t        w = strengths[quad.data.index] * alpha / l;\n\t        node.vx += x * w;\n\t        node.vy += y * w;\n\t      } while (quad = quad.next);\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.distanceMin = function(_) {\n\t      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n\t    };\n\t\n\t    force.distanceMax = function(_) {\n\t      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n\t    };\n\t\n\t    force.theta = function(_) {\n\t      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$2(x) {\n\t    var strength = constant(0.1),\n\t        nodes,\n\t        strengths,\n\t        xz;\n\t\n\t    if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      xz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function y$2(y) {\n\t    var strength = constant(0.1),\n\t        nodes,\n\t        strengths,\n\t        yz;\n\t\n\t    if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      yz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  exports.forceCenter = center;\n\t  exports.forceCollide = collide;\n\t  exports.forceLink = link;\n\t  exports.forceManyBody = manyBody;\n\t  exports.forceSimulation = simulation;\n\t  exports.forceX = x$2;\n\t  exports.forceY = y$2;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-quadtree/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  function tree_add(d) {\n\t    var x = +this._x.call(null, d),\n\t        y = +this._y.call(null, d);\n\t    return add(this.cover(x, y), x, y, d);\n\t  }\n\t\n\t  function add(tree, x, y, d) {\n\t    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\t\n\t    var parent,\n\t        node = tree._root,\n\t        leaf = {data: d},\n\t        x0 = tree._x0,\n\t        y0 = tree._y0,\n\t        x1 = tree._x1,\n\t        y1 = tree._y1,\n\t        xm,\n\t        ym,\n\t        xp,\n\t        yp,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return tree._root = leaf, tree;\n\t\n\t    // Find the existing leaf for the new point, or add it.\n\t    while (node.length) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n\t    }\n\t\n\t    // Is the new point is exactly coincident with the existing point?\n\t    xp = +tree._x.call(null, node.data);\n\t    yp = +tree._y.call(null, node.data);\n\t    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\t\n\t    // Otherwise, split the leaf node until the old and new point are separated.\n\t    do {\n\t      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n\t    return parent[j] = node, parent[i] = leaf, tree;\n\t  }\n\t\n\t  function addAll(data) {\n\t    var d, i, n = data.length,\n\t        x,\n\t        y,\n\t        xz = new Array(n),\n\t        yz = new Array(n),\n\t        x0 = Infinity,\n\t        y0 = Infinity,\n\t        x1 = -Infinity,\n\t        y1 = -Infinity;\n\t\n\t    // Compute the points and their extent.\n\t    for (i = 0; i < n; ++i) {\n\t      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n\t      xz[i] = x;\n\t      yz[i] = y;\n\t      if (x < x0) x0 = x;\n\t      if (x > x1) x1 = x;\n\t      if (y < y0) y0 = y;\n\t      if (y > y1) y1 = y;\n\t    }\n\t\n\t    // If there were no (valid) points, inherit the existing extent.\n\t    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n\t    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\t\n\t    // Expand the tree to cover the new points.\n\t    this.cover(x0, y0).cover(x1, y1);\n\t\n\t    // Add the new points.\n\t    for (i = 0; i < n; ++i) {\n\t      add(this, xz[i], yz[i], data[i]);\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function tree_cover(x, y) {\n\t    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\t\n\t    var x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1;\n\t\n\t    // If the quadtree has no extent, initialize them.\n\t    // Integer extent are necessary so that if we later double the extent,\n\t    // the existing quadrant boundaries don’t change due to floating point error!\n\t    if (isNaN(x0)) {\n\t      x1 = (x0 = Math.floor(x)) + 1;\n\t      y1 = (y0 = Math.floor(y)) + 1;\n\t    }\n\t\n\t    // Otherwise, double repeatedly to cover.\n\t    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n\t      var z = x1 - x0,\n\t          node = this._root,\n\t          parent,\n\t          i;\n\t\n\t      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n\t        case 0: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n\t          break;\n\t        }\n\t        case 1: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n\t          break;\n\t        }\n\t        case 2: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n\t          break;\n\t        }\n\t        case 3: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n\t          break;\n\t        }\n\t      }\n\t\n\t      if (this._root && this._root.length) this._root = node;\n\t    }\n\t\n\t    // If the quadtree covers the point already, just return.\n\t    else return this;\n\t\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    return this;\n\t  }\n\t\n\t  function tree_data() {\n\t    var data = [];\n\t    this.visit(function(node) {\n\t      if (!node.length) do data.push(node.data); while (node = node.next)\n\t    });\n\t    return data;\n\t  }\n\t\n\t  function tree_extent(_) {\n\t    return arguments.length\n\t        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n\t        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n\t  }\n\t\n\t  function Quad(node, x0, y0, x1, y1) {\n\t    this.node = node;\n\t    this.x0 = x0;\n\t    this.y0 = y0;\n\t    this.x1 = x1;\n\t    this.y1 = y1;\n\t  }\n\t\n\t  function tree_find(x, y, radius) {\n\t    var data,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1,\n\t        y1,\n\t        x2,\n\t        y2,\n\t        x3 = this._x1,\n\t        y3 = this._y1,\n\t        quads = [],\n\t        node = this._root,\n\t        q,\n\t        i;\n\t\n\t    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n\t    if (radius == null) radius = Infinity;\n\t    else {\n\t      x0 = x - radius, y0 = y - radius;\n\t      x3 = x + radius, y3 = y + radius;\n\t      radius *= radius;\n\t    }\n\t\n\t    while (q = quads.pop()) {\n\t\n\t      // Stop searching if this quadrant can’t contain a closer node.\n\t      if (!(node = q.node)\n\t          || (x1 = q.x0) > x3\n\t          || (y1 = q.y0) > y3\n\t          || (x2 = q.x1) < x0\n\t          || (y2 = q.y1) < y0) continue;\n\t\n\t      // Bisect the current quadrant.\n\t      if (node.length) {\n\t        var xm = (x1 + x2) / 2,\n\t            ym = (y1 + y2) / 2;\n\t\n\t        quads.push(\n\t          new Quad(node[3], xm, ym, x2, y2),\n\t          new Quad(node[2], x1, ym, xm, y2),\n\t          new Quad(node[1], xm, y1, x2, ym),\n\t          new Quad(node[0], x1, y1, xm, ym)\n\t        );\n\t\n\t        // Visit the closest quadrant first.\n\t        if (i = (y >= ym) << 1 | (x >= xm)) {\n\t          q = quads[quads.length - 1];\n\t          quads[quads.length - 1] = quads[quads.length - 1 - i];\n\t          quads[quads.length - 1 - i] = q;\n\t        }\n\t      }\n\t\n\t      // Visit this point. (Visiting coincident points isn’t necessary!)\n\t      else {\n\t        var dx = x - +this._x.call(null, node.data),\n\t            dy = y - +this._y.call(null, node.data),\n\t            d2 = dx * dx + dy * dy;\n\t        if (d2 < radius) {\n\t          var d = Math.sqrt(radius = d2);\n\t          x0 = x - d, y0 = y - d;\n\t          x3 = x + d, y3 = y + d;\n\t          data = node.data;\n\t        }\n\t      }\n\t    }\n\t\n\t    return data;\n\t  }\n\t\n\t  function tree_remove(d) {\n\t    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\t\n\t    var parent,\n\t        node = this._root,\n\t        retainer,\n\t        previous,\n\t        next,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1,\n\t        x,\n\t        y,\n\t        xm,\n\t        ym,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return this;\n\t\n\t    // Find the leaf node for the point.\n\t    // While descending, also retain the deepest parent with a non-removed sibling.\n\t    if (node.length) while (true) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n\t      if (!node.length) break;\n\t      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n\t    }\n\t\n\t    // Find the point to remove.\n\t    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n\t    if (next = node.next) delete node.next;\n\t\n\t    // If there are multiple coincident points, remove just the point.\n\t    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\t\n\t    // If this is the root point, remove it.\n\t    if (!parent) return this._root = next, this;\n\t\n\t    // Remove this leaf.\n\t    next ? parent[i] = next : delete parent[i];\n\t\n\t    // If the parent now contains exactly one leaf, collapse superfluous parents.\n\t    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n\t        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n\t        && !node.length) {\n\t      if (retainer) retainer[j] = node;\n\t      else this._root = node;\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function removeAll(data) {\n\t    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n\t    return this;\n\t  }\n\t\n\t  function tree_root() {\n\t    return this._root;\n\t  }\n\t\n\t  function tree_size() {\n\t    var size = 0;\n\t    this.visit(function(node) {\n\t      if (!node.length) do ++size; while (node = node.next)\n\t    });\n\t    return size;\n\t  }\n\t\n\t  function tree_visit(callback) {\n\t    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n\t    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n\t        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t      }\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function tree_visitAfter(callback) {\n\t    var quads = [], next = [], q;\n\t    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      var node = q.node;\n\t      if (node.length) {\n\t        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t      }\n\t      next.push(q);\n\t    }\n\t    while (q = next.pop()) {\n\t      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function defaultX(d) {\n\t    return d[0];\n\t  }\n\t\n\t  function tree_x(_) {\n\t    return arguments.length ? (this._x = _, this) : this._x;\n\t  }\n\t\n\t  function defaultY(d) {\n\t    return d[1];\n\t  }\n\t\n\t  function tree_y(_) {\n\t    return arguments.length ? (this._y = _, this) : this._y;\n\t  }\n\t\n\t  function quadtree(nodes, x, y) {\n\t    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n\t    return nodes == null ? tree : tree.addAll(nodes);\n\t  }\n\t\n\t  function Quadtree(x, y, x0, y0, x1, y1) {\n\t    this._x = x;\n\t    this._y = y;\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    this._root = undefined;\n\t  }\n\t\n\t  function leaf_copy(leaf) {\n\t    var copy = {data: leaf.data}, next = copy;\n\t    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n\t    return copy;\n\t  }\n\t\n\t  var treeProto = quadtree.prototype = Quadtree.prototype;\n\t\n\t  treeProto.copy = function() {\n\t    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n\t        node = this._root,\n\t        nodes,\n\t        child;\n\t\n\t    if (!node) return copy;\n\t\n\t    if (!node.length) return copy._root = leaf_copy(node), copy;\n\t\n\t    nodes = [{source: node, target: copy._root = new Array(4)}];\n\t    while (node = nodes.pop()) {\n\t      for (var i = 0; i < 4; ++i) {\n\t        if (child = node.source[i]) {\n\t          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n\t          else node.target[i] = leaf_copy(child);\n\t        }\n\t      }\n\t    }\n\t\n\t    return copy;\n\t  };\n\t\n\t  treeProto.add = tree_add;\n\t  treeProto.addAll = addAll;\n\t  treeProto.cover = tree_cover;\n\t  treeProto.data = tree_data;\n\t  treeProto.extent = tree_extent;\n\t  treeProto.find = tree_find;\n\t  treeProto.remove = tree_remove;\n\t  treeProto.removeAll = removeAll;\n\t  treeProto.root = tree_root;\n\t  treeProto.size = tree_size;\n\t  treeProto.visit = tree_visit;\n\t  treeProto.visitAfter = tree_visitAfter;\n\t  treeProto.x = tree_x;\n\t  treeProto.y = tree_y;\n\t\n\t  exports.quadtree = quadtree;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-collection/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var prefix = \"$\";\n\t\n\t  function Map() {}\n\t\n\t  Map.prototype = map.prototype = {\n\t    constructor: Map,\n\t    has: function(key) {\n\t      return (prefix + key) in this;\n\t    },\n\t    get: function(key) {\n\t      return this[prefix + key];\n\t    },\n\t    set: function(key, value) {\n\t      this[prefix + key] = value;\n\t      return this;\n\t    },\n\t    remove: function(key) {\n\t      var property = prefix + key;\n\t      return property in this && delete this[property];\n\t    },\n\t    clear: function() {\n\t      for (var property in this) if (property[0] === prefix) delete this[property];\n\t    },\n\t    keys: function() {\n\t      var keys = [];\n\t      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n\t      return keys;\n\t    },\n\t    values: function() {\n\t      var values = [];\n\t      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n\t      return values;\n\t    },\n\t    entries: function() {\n\t      var entries = [];\n\t      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n\t      return entries;\n\t    },\n\t    size: function() {\n\t      var size = 0;\n\t      for (var property in this) if (property[0] === prefix) ++size;\n\t      return size;\n\t    },\n\t    empty: function() {\n\t      for (var property in this) if (property[0] === prefix) return false;\n\t      return true;\n\t    },\n\t    each: function(f) {\n\t      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n\t    }\n\t  };\n\t\n\t  function map(object, f) {\n\t    var map = new Map;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\t\n\t    // Index array by numeric index or specified key function.\n\t    else if (Array.isArray(object)) {\n\t      var i = -1,\n\t          n = object.length,\n\t          o;\n\t\n\t      if (f == null) while (++i < n) map.set(i, object[i]);\n\t      else while (++i < n) map.set(f(o = object[i], i, object), o);\n\t    }\n\t\n\t    // Convert object to map.\n\t    else if (object) for (var key in object) map.set(key, object[key]);\n\t\n\t    return map;\n\t  }\n\t\n\t  function nest() {\n\t    var keys = [],\n\t        sortKeys = [],\n\t        sortValues,\n\t        rollup,\n\t        nest;\n\t\n\t    function apply(array, depth, createResult, setResult) {\n\t      if (depth >= keys.length) return rollup != null\n\t          ? rollup(array) : (sortValues != null\n\t          ? array.sort(sortValues)\n\t          : array);\n\t\n\t      var i = -1,\n\t          n = array.length,\n\t          key = keys[depth++],\n\t          keyValue,\n\t          value,\n\t          valuesByKey = map(),\n\t          values,\n\t          result = createResult();\n\t\n\t      while (++i < n) {\n\t        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n\t          values.push(value);\n\t        } else {\n\t          valuesByKey.set(keyValue, [value]);\n\t        }\n\t      }\n\t\n\t      valuesByKey.each(function(values, key) {\n\t        setResult(result, key, apply(values, depth, createResult, setResult));\n\t      });\n\t\n\t      return result;\n\t    }\n\t\n\t    function entries(map, depth) {\n\t      if (++depth > keys.length) return map;\n\t      var array, sortKey = sortKeys[depth - 1];\n\t      if (rollup != null && depth >= keys.length) array = map.entries();\n\t      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n\t      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n\t    }\n\t\n\t    return nest = {\n\t      object: function(array) { return apply(array, 0, createObject, setObject); },\n\t      map: function(array) { return apply(array, 0, createMap, setMap); },\n\t      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n\t      key: function(d) { keys.push(d); return nest; },\n\t      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n\t      sortValues: function(order) { sortValues = order; return nest; },\n\t      rollup: function(f) { rollup = f; return nest; }\n\t    };\n\t  }\n\t\n\t  function createObject() {\n\t    return {};\n\t  }\n\t\n\t  function setObject(object, key, value) {\n\t    object[key] = value;\n\t  }\n\t\n\t  function createMap() {\n\t    return map();\n\t  }\n\t\n\t  function setMap(map, key, value) {\n\t    map.set(key, value);\n\t  }\n\t\n\t  function Set() {}\n\t\n\t  var proto = map.prototype;\n\t\n\t  Set.prototype = set.prototype = {\n\t    constructor: Set,\n\t    has: proto.has,\n\t    add: function(value) {\n\t      value += \"\";\n\t      this[prefix + value] = value;\n\t      return this;\n\t    },\n\t    remove: proto.remove,\n\t    clear: proto.clear,\n\t    values: proto.keys,\n\t    size: proto.size,\n\t    empty: proto.empty,\n\t    each: proto.each\n\t  };\n\t\n\t  function set(object, f) {\n\t    var set = new Set;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\t\n\t    // Otherwise, assume it’s an array.\n\t    else if (object) {\n\t      var i = -1, n = object.length;\n\t      if (f == null) while (++i < n) set.add(object[i]);\n\t      else while (++i < n) set.add(f(object[i], i, object));\n\t    }\n\t\n\t    return set;\n\t  }\n\t\n\t  function keys(map) {\n\t    var keys = [];\n\t    for (var key in map) keys.push(key);\n\t    return keys;\n\t  }\n\t\n\t  function values(map) {\n\t    var values = [];\n\t    for (var key in map) values.push(map[key]);\n\t    return values;\n\t  }\n\t\n\t  function entries(map) {\n\t    var entries = [];\n\t    for (var key in map) entries.push({key: key, value: map[key]});\n\t    return entries;\n\t  }\n\t\n\t  exports.nest = nest;\n\t  exports.set = set;\n\t  exports.map = map;\n\t  exports.keys = keys;\n\t  exports.values = values;\n\t  exports.entries = entries;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-dispatch/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var noop = {value: function() {}};\n\t\n\t  function dispatch() {\n\t    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n\t      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n\t      _[t] = [];\n\t    }\n\t    return new Dispatch(_);\n\t  }\n\t\n\t  function Dispatch(_) {\n\t    this._ = _;\n\t  }\n\t\n\t  function parseTypenames(typenames, types) {\n\t    return typenames.trim().split(/^|\\s+/).map(function(t) {\n\t      var name = \"\", i = t.indexOf(\".\");\n\t      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n\t      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n\t      return {type: t, name: name};\n\t    });\n\t  }\n\t\n\t  Dispatch.prototype = dispatch.prototype = {\n\t    constructor: Dispatch,\n\t    on: function(typename, callback) {\n\t      var _ = this._,\n\t          T = parseTypenames(typename + \"\", _),\n\t          t,\n\t          i = -1,\n\t          n = T.length;\n\t\n\t      // If no callback was specified, return the callback of the given type and name.\n\t      if (arguments.length < 2) {\n\t        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n\t        return;\n\t      }\n\t\n\t      // If a type was specified, set the callback for the given type and name.\n\t      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n\t      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n\t      while (++i < n) {\n\t        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n\t        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n\t      }\n\t\n\t      return this;\n\t    },\n\t    copy: function() {\n\t      var copy = {}, _ = this._;\n\t      for (var t in _) copy[t] = _[t].slice();\n\t      return new Dispatch(copy);\n\t    },\n\t    call: function(type, that) {\n\t      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    },\n\t    apply: function(type, that, args) {\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    }\n\t  };\n\t\n\t  function get(type, name) {\n\t    for (var i = 0, n = type.length, c; i < n; ++i) {\n\t      if ((c = type[i]).name === name) {\n\t        return c.value;\n\t      }\n\t    }\n\t  }\n\t\n\t  function set(type, name, callback) {\n\t    for (var i = 0, n = type.length; i < n; ++i) {\n\t      if (type[i].name === name) {\n\t        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n\t        break;\n\t      }\n\t    }\n\t    if (callback != null) type.push({name: name, value: callback});\n\t    return type;\n\t  }\n\t\n\t  exports.dispatch = dispatch;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-timer/ Version 1.0.2. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var frame = 0;\n\t  var timeout = 0;\n\t  var interval = 0;\n\t  var pokeDelay = 1000;\n\t  var taskHead;\n\t  var taskTail;\n\t  var clockLast = 0;\n\t  var clockNow = 0;\n\t  var clockSkew = 0;\n\t  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n\t  var setFrame = typeof requestAnimationFrame === \"function\"\n\t          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n\t          : function(f) { setTimeout(f, 17); };\n\t  function now() {\n\t    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n\t  }\n\t\n\t  function clearNow() {\n\t    clockNow = 0;\n\t  }\n\t\n\t  function Timer() {\n\t    this._call =\n\t    this._time =\n\t    this._next = null;\n\t  }\n\t\n\t  Timer.prototype = timer.prototype = {\n\t    constructor: Timer,\n\t    restart: function(callback, delay, time) {\n\t      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n\t      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n\t      if (!this._next && taskTail !== this) {\n\t        if (taskTail) taskTail._next = this;\n\t        else taskHead = this;\n\t        taskTail = this;\n\t      }\n\t      this._call = callback;\n\t      this._time = time;\n\t      sleep();\n\t    },\n\t    stop: function() {\n\t      if (this._call) {\n\t        this._call = null;\n\t        this._time = Infinity;\n\t        sleep();\n\t      }\n\t    }\n\t  };\n\t\n\t  function timer(callback, delay, time) {\n\t    var t = new Timer;\n\t    t.restart(callback, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function timerFlush() {\n\t    now(); // Get the current time, if not already set.\n\t    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n\t    var t = taskHead, e;\n\t    while (t) {\n\t      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n\t      t = t._next;\n\t    }\n\t    --frame;\n\t  }\n\t\n\t  function wake(time) {\n\t    clockNow = (clockLast = time || clock.now()) + clockSkew;\n\t    frame = timeout = 0;\n\t    try {\n\t      timerFlush();\n\t    } finally {\n\t      frame = 0;\n\t      nap();\n\t      clockNow = 0;\n\t    }\n\t  }\n\t\n\t  function poke() {\n\t    var now = clock.now(), delay = now - clockLast;\n\t    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n\t  }\n\t\n\t  function nap() {\n\t    var t0, t1 = taskHead, t2, time = Infinity;\n\t    while (t1) {\n\t      if (t1._call) {\n\t        if (time > t1._time) time = t1._time;\n\t        t0 = t1, t1 = t1._next;\n\t      } else {\n\t        t2 = t1._next, t1._next = null;\n\t        t1 = t0 ? t0._next = t2 : taskHead = t2;\n\t      }\n\t    }\n\t    taskTail = t0;\n\t    sleep(time);\n\t  }\n\t\n\t  function sleep(time) {\n\t    if (frame) return; // Soonest alarm already set, or will be.\n\t    if (timeout) timeout = clearTimeout(timeout);\n\t    var delay = time - clockNow;\n\t    if (delay > 24) {\n\t      if (time < Infinity) timeout = setTimeout(wake, delay);\n\t      if (interval) interval = clearInterval(interval);\n\t    } else {\n\t      if (!interval) interval = setInterval(poke, pokeDelay);\n\t      frame = 1, setFrame(wake);\n\t    }\n\t  }\n\t\n\t  function timeout$1(callback, delay, time) {\n\t    var t = new Timer;\n\t    delay = delay == null ? 0 : +delay;\n\t    t.restart(function(elapsed) {\n\t      t.stop();\n\t      callback(elapsed + delay);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function interval$1(callback, delay, time) {\n\t    var t = new Timer, total = delay;\n\t    if (delay == null) return t.restart(callback, delay, time), t;\n\t    delay = +delay, time = time == null ? now() : +time;\n\t    t.restart(function tick(elapsed) {\n\t      elapsed += total;\n\t      t.restart(tick, total += delay, time);\n\t      callback(elapsed);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\t  exports.now = now;\n\t  exports.timer = timer;\n\t  exports.timerFlush = timerFlush;\n\t  exports.timeout = timeout$1;\n\t  exports.interval = interval$1;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (d, ctx) {\n\t  ctx.moveTo(d.x + 3, d.y);\n\t  ctx.arc(d.x, d.y, 20, 0, 2 * Math.PI);\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (d, ctx) {\n\t  ctx.moveTo(d.source.x, d.source.y);\n\t  ctx.lineTo(d.target.x, d.target.y);\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** brambl.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 72a0fe3005aa5a5cda99\n **/","// Main export\nmodule.exports = {\n  Graph: require('./js/brambl.graph.js')\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bundle.js\n **/","var d3          = require('d3-force');\nvar renderNode  = require('./renderers/brambl.node.renderer'); \nvar renderEdge  = require('./renderers/brambl.edge.renderer'); \n\nclass Graph {\n\n  /* Create an instance of a brambl \n   *\n   */\n  constructor(selector, data = {}, options = {}) {\n    this.selector   = selector;\n    this.options    = options;\n    this.nodes      = data.nodes || [];\n    this.edges      = data.edges || [];\n    this.canvas     = document.querySelector(selector);\n    this.simulation = null; \n    this.context    = graph.canvas.getContext(\"2d\");\n  }\n\n  /**\n  * start the simulation\n  */\n  start() {\n    this.simulation = d3.forceSimulation()\n        .force(\"link\", d3.forceLink().id(d => d.id))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"center\", d3.forceCenter(this.canvas.width / 2, this.canvas.height / 2));\n\n    this.simulation\n        .nodes(this.nodes);\n\n    this.simulation.force(\"link\")\n        .links(this.edges)\n        .distance(d =>  100);\n\n    this.simulation.on(\"tick\", () => this.render());\n  }\n\n  /**\n  * stop the simulation\n  */\n  stop() {\n    this.simulation.stop();\n  }\n\n\n  /**\n  * render a frame \n  */  \n  render() {\n    this.context.clearRect(0, 0, this.graph.canvas.width, this.graph.canvas.height);\n\n    this.context.beginPath();\n    this.edges.forEach((d) => renderEdge(d, this.context));\n    this.context.stroke();\n\n    this.context.beginPath();\n    this.nodes.forEach((d) => renderNode(d, this.context));\n    this.context.fill();\n  }\n}\n\nmodule.exports = Graph; \n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/brambl.graph.js\n **/","// https://d3js.org/d3-force/ Version 1.0.2. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\n  (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\n}(this, function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\n\n  function center(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x(d) {\n    return d.x + d.vx;\n  }\n\n  function y(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index,\n        strength = defaultStrength,\n        strengths,\n        distance = constant(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = d3Collection.map(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$1(d) {\n    return d.x;\n  }\n\n  function y$1(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = d3Collection.map(),\n        stepper = d3Timer.timer(step),\n        event = d3Dispatch.dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$2(x) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$2(y) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  exports.forceCenter = center;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$2;\n  exports.forceY = y$2;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-force/build/d3-force.js\n ** module id = 2\n ** module chunks = 0\n **/","// https://d3js.org/d3-quadtree/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  exports.quadtree = quadtree;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-quadtree/build/d3-quadtree.js\n ** module id = 3\n ** module chunks = 0\n **/","// https://d3js.org/d3-collection/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  exports.nest = nest;\n  exports.set = set;\n  exports.map = map;\n  exports.keys = keys;\n  exports.values = values;\n  exports.entries = entries;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-collection/build/d3-collection.js\n ** module id = 4\n ** module chunks = 0\n **/","// https://d3js.org/d3-dispatch/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var noop = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  exports.dispatch = dispatch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-dispatch/build/d3-dispatch.js\n ** module id = 5\n ** module chunks = 0\n **/","// https://d3js.org/d3-timer/ Version 1.0.2. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-timer/build/d3-timer.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = (d, ctx) => {\n  ctx.moveTo(d.x + 3, d.y);\n  ctx.arc(d.x, d.y, 20, 0, 2 * Math.PI);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/renderers/brambl.node.renderer.js\n **/","module.exports = (d, ctx) => {\n  ctx.moveTo(d.source.x, d.source.y);\n  ctx.lineTo(d.target.x, d.target.y);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/renderers/brambl.edge.renderer.js\n **/"],"sourceRoot":""}