{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///brambl.min.js","webpack:///webpack/bootstrap d00e9d8c3595e2fdb853","webpack:///./src/bundle.js","webpack:///./src/js/brambl.graph.js","webpack:///./~/d3-force/build/d3-force.js","webpack:///./~/d3-quadtree/build/d3-quadtree.js","webpack:///./~/d3-collection/build/d3-collection.js","webpack:///./~/d3-dispatch/build/d3-dispatch.js","webpack:///./~/d3-timer/build/d3-timer.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Graph","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","d3","selector","data","arguments","undefined","options","nodes","edges","container","document","querySelector","value","redraw","context","clearRect","width","height","beginPath","forEach","drawLink","stroke","drawNode","fill","d","moveTo","source","x","y","lineTo","arc","Math","PI","canvas","createElement","appendChild","getContext","simulation","forceSimulation","force","forceLink","forceManyBody","forceCenter","on","bind","links","distance","global","d3Quadtree","d3Collection","d3Dispatch","d3Timer","center","node","n","sx","sy","initialize","_","constant","jiggle","random","vx","vy","collide","radius","apply","quad","x0","y0","x1","y1","rj","r","ri","xi","yi","index","l","sqrt","strength","ri2","tree","k","iterations","quadtree","visitAfter","prepare","radii","visit","Array","link","defaultStrength","min","count","alpha","b","distances","strengths","bias","nodeById","map","get","initializeStrength","initializeDistance","x$1","y$1","step","tick","event","alphaMin","stepper","stop","alphaTarget","alphaDecay","forces","each","fx","velocityDecay","fy","initializeNodes","isNaN","initialRadius","angle","initialAngle","cos","sin","initializeForce","pow","timer","dispatch","restart","name","remove","set","find","dx","dy","d2","closest","Infinity","manyBody","accumulate","q","next","x2","w","theta2","distanceMax2","distanceMin2","distanceMin","distanceMax","theta","x$2","xz","y$2","yz","forceCollide","forceX","forceY","tree_add","_x","_y","add","cover","parent","xm","ym","xp","yp","right","bottom","j","_root","leaf","_x0","_y0","_x1","_y1","addAll","tree_cover","floor","z","tree_data","push","tree_extent","Quad","tree_find","y2","x3","y3","quads","pop","tree_remove","retainer","previous","removeAll","tree_root","tree_size","size","tree_visit","callback","child","tree_visitAfter","defaultX","tree_x","defaultY","tree_y","Quadtree","NaN","leaf_copy","copy","treeProto","extent","Map","object","f","isArray","o","nest","array","depth","createResult","setResult","keys","rollup","sortValues","sort","keyValue","values","valuesByKey","result","entries","sortKey","sortKeys","v","a","createObject","setObject","createMap","setMap","order","Set","prefix","constructor","has","property","clear","slice","empty","proto","t","Error","Dispatch","parseTypenames","typenames","types","trim","split","indexOf","hasOwnProperty","type","noop","concat","typename","T","that","args","now","clockNow","setFrame","clearNow","clock","clockSkew","Timer","_call","_time","_next","delay","time","timerFlush","frame","e","taskHead","wake","clockLast","timeout","nap","poke","pokeDelay","t0","t2","t1","taskTail","sleep","clearTimeout","setTimeout","interval","clearInterval","setInterval","timeout$1","elapsed","interval$1","total","performance","Date","requestAnimationFrame"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,OAAAD,IAEAD,EAAA,OAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/B,YEvDDL,GAAOD,SACLe,MAAOT,EAAQ,KF+DX,SAASL,EAAQD,EAASM,GAE/B,YAIA,SAASU,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MGrE7hBkB,EAAQ9B,EAAQ,GAEdS,EHyEO,WGpEX,QAAAA,GAAYsB,GAAmC,GAAzBC,GAAyBC,UAAAd,QAAA,GAAAe,SAAAD,UAAA,MAAAA,UAAA,GAAdE,EAAcF,UAAAd,QAAA,GAAAe,SAAAD,UAAA,MAAAA,UAAA,EAAAvB,GAAAZ,KAAAW,GAC7CX,KAAKiC,SAAaA,EAClBjC,KAAKqC,QAAaA,EAClBrC,KAAKsC,MAAaJ,EAAKI,UACvBtC,KAAKuC,MAAaL,EAAKK,UACvBvC,KAAKwC,UAAaC,SAASC,cAAcT,GHwI1C,MA9CAjB,GAAaL,IACXiB,IAAK,QACLe,MAAO,WG3DR,QAASC,KACPC,EAAQC,UAAU,EAAG,EAAGC,EAAOC,GAE/BH,EAAQI,YACRjD,KAAKuC,MAAMW,QAAQC,GACnBN,EAAQO,SAERP,EAAQI,YACRjD,KAAKsC,MAAMY,QAAQG,GACnBR,EAAQS,OAGV,QAASH,GAASI,GAChBV,EAAQW,OAAOD,EAAEE,OAAOC,EAAGH,EAAEE,OAAOE,GACpCd,EAAQe,OAAOL,EAAErC,OAAOwC,EAAGH,EAAErC,OAAOyC,GAGtC,QAASN,GAASE,GAChBV,EAAQW,OAAOD,EAAEG,EAAI,EAAGH,EAAEI,GAC1Bd,EAAQgB,IAAIN,EAAEG,EAAGH,EAAEI,EAAG,GAAI,EAAG,EAAIG,KAAKC,IAxCxC,GAAIC,GAASvB,SAASwB,cAAc,SACpCzB,WAAU0B,YAAYF,EAEtB,IAAInB,GAAUmB,EAAOG,WAAW,MAE5BpB,EAAQiB,EAAOjB,MAAQ,IACvBC,EAASgB,EAAOhB,OAAS,IAEzBoB,EAAapC,EAAGqC,kBACfC,MAAM,OAAQtC,EAAGuC,YAAYlE,GAAG,SAAAkD,GAAA,MAAKA,GAAElD,MACvCiE,MAAM,SAAUtC,EAAGwC,iBACnBF,MAAM,SAAUtC,EAAGyC,YAAY1B,EAAQ,EAAGC,EAAS,GAExDoB,GACK9B,MAAMtC,KAAKsC,OACXoC,GAAG,OAAQ9B,EAAO+B,KAAK3E,OAE5BoE,EAAWE,MAAM,QACZM,MAAM5E,KAAKuC,OACXsC,SAAS,SAAAtB,GAAA,MAAM,WHyGd5C,IG7EVd,GAAOD,QAAUe,GHoFX,SAASd,EAAQD,EAASM,II1JhC,SAAA4E,EAAAnF,GACAA,EAAAC,EAAAM,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGCF,KAAA,SAAAJ,EAAAmF,EAAAC,EAAAC,EAAAC,GAAsE,YAEvE,SAAAC,GAAAzB,EAAAC,GAMA,QAAAW,KACA,GAAAlD,GAEAgE,EADAC,EAAA/C,EAAAjB,OAEAiE,EAAA,EACAC,EAAA,CAEA,KAAAnE,EAAA,EAAiBA,EAAAiE,IAAOjE,EACxBgE,EAAA9C,EAAAlB,GAAAkE,GAAAF,EAAA1B,EAAA6B,GAAAH,EAAAzB,CAGA,KAAA2B,IAAAD,EAAA3B,EAAA6B,IAAAF,EAAA1B,EAAAvC,EAAA,EAAmDA,EAAAiE,IAAOjE,EAC1DgE,EAAA9C,EAAAlB,GAAAgE,EAAA1B,GAAA4B,EAAAF,EAAAzB,GAAA4B,EAjBA,GAAAjD,EAiCA,OA/BA,OAAAoB,MAAA,GACA,MAAAC,MAAA,GAkBAW,EAAAkB,WAAA,SAAAC,GACAnD,EAAAmD,GAGAnB,EAAAZ,EAAA,SAAA+B,GACA,MAAAtD,WAAAd,QAAAqC,GAAA+B,EAAAnB,GAAAZ,GAGAY,EAAAX,EAAA,SAAA8B,GACA,MAAAtD,WAAAd,QAAAsC,GAAA8B,EAAAnB,GAAAX,GAGAW,EAGA,QAAAoB,GAAAhC,GACA,kBACA,MAAAA,IAIA,QAAAiC,KACA,aAAA7B,KAAA8B,SAAA,IAGA,QAAAlC,GAAAH,GACA,MAAAA,GAAAG,EAAAH,EAAAsC,GAGA,QAAAlC,GAAAJ,GACA,MAAAA,GAAAI,EAAAJ,EAAAuC,GAGA,QAAAC,GAAAC,GAQA,QAAA1B,KAoBA,QAAA2B,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAApE,GAAAgE,EAAAhE,KAAAqE,EAAAL,EAAAM,IAAAC,EAAAF,CACA,MAAArE,EAiBA,MAAAiE,GAAAO,EAAAF,GAAAH,EAAAK,EAAAF,GAAAJ,EAAAO,EAAAH,GAAAF,EAAAK,EAAAH,CAhBA,IAAAtE,EAAA0E,MAAAxF,EAAA,CACA,GAAAsC,GAAAgD,EAAAxE,EAAAwB,EAAAxB,EAAA2D,GACAlC,EAAAgD,EAAAzE,EAAAyB,EAAAzB,EAAA4D,GACAe,EAAAnD,IAAAC,GACAkD,GAAAL,MACA,IAAA9C,MAAAiC,IAAAkB,GAAAnD,KACA,IAAAC,MAAAgC,IAAAkB,GAAAlD,KACAkD,GAAAL,GAAAK,EAAA/C,KAAAgD,KAAAD,OAAAE,EACA3B,EAAAS,KAAAnC,GAAAmD,IAAAL,GAAAD,OAAAS,EAAAT,IACAnB,EAAAU,KAAAnC,GAAAkD,GAAAL,EACAtE,EAAA2D,IAAAnC,GAAA8C,EAAA,EAAAA,GACAtE,EAAA4D,IAAAnC,EAAA6C,KAzBA,OARApF,GACA6F,EACA7B,EACAsB,EACAC,EACAF,EACAO,EANA3B,EAAA/C,EAAAjB,OAQA6F,EAAA,EAAqBA,EAAAC,IAAgBD,EAErC,IADAD,EAAAlC,EAAAqC,SAAA9E,EAAAoB,EAAAC,GAAA0D,WAAAC,GACAlG,EAAA,EAAmBA,EAAAiE,IAAOjE,EAC1BgE,EAAA9C,EAAAlB,GACAqF,EAAAc,EAAAnG,GAAA4F,EAAAP,IACAC,EAAAtB,EAAA1B,EAAA0B,EAAAS,GACAc,EAAAvB,EAAAzB,EAAAyB,EAAAU,GACAmB,EAAAO,MAAAvB,GA2BA,QAAAqB,GAAApB,GACA,GAAAA,EAAAhE,KAAA,MAAAgE,GAAAM,EAAAe,EAAArB,EAAAhE,KAAA0E,MACA,QAAAxF,GAAA8E,EAAAM,EAAA,EAA8BpF,EAAA,IAAOA,EACrC8E,EAAA9E,IAAA8E,EAAA9E,GAAAoF,EAAAN,EAAAM,IACAN,EAAAM,EAAAN,EAAA9E,GAAAoF,GAtDA,GAAAlE,GACAiF,EACAR,EAAA,EACAI,EAAA,CAyEA,OAvEA,kBAAAnB,OAAAN,EAAA,MAAAM,EAAA,GAAAA,IAsDA1B,EAAAkB,WAAA,SAAAC,GACA,GAAArE,GAAAiE,GAAA/C,EAAAmD,GAAApE,MACA,KADoCkG,EAAA,GAAAE,OAAApC,GACpCjE,EAAA,EAAiBA,EAAAiE,IAAOjE,EAAAmG,EAAAnG,IAAA4E,EAAA1D,EAAAlB,KAAAkB,IAGxBgC,EAAA6C,WAAA,SAAA1B,GACA,MAAAtD,WAAAd,QAAA8F,GAAA1B,EAAAnB,GAAA6C,GAGA7C,EAAAyC,SAAA,SAAAtB,GACA,MAAAtD,WAAAd,QAAA0F,GAAAtB,EAAAnB,GAAAyC,GAGAzC,EAAA0B,OAAA,SAAAP,GACA,MAAAtD,WAAAd,QAAA2E,EAAA,kBAAAP,KAAAC,GAAAD,GAAAnB,GAAA0B,GAGA1B,EAGA,QAAAsC,GAAArD,EAAAnC,GACA,MAAAA,GAGA,QAAAsG,GAAA9C,GAaA,QAAA+C,GAAAD,GACA,SAAA5D,KAAA8D,IAAAC,EAAAH,EAAAjE,OAAAmD,OAAAiB,EAAAH,EAAAxG,OAAA0F,QAGA,QAAAtC,GAAAwD,GACA,OAAAZ,GAAA,EAAA7B,EAAAT,EAAAvD,OAAuC6F,EAAAC,IAAgBD,EACvD,OAAAQ,GAAAjE,EAAAvC,EAAAwC,EAAAC,EAAAkD,EAAAkB,EAAA3G,EAAA,EAAyDA,EAAAiE,IAAOjE,EAChEsG,EAAA9C,EAAAxD,GAAAqC,EAAAiE,EAAAjE,OAAAvC,EAAAwG,EAAAxG,OACAwC,EAAAxC,EAAAwC,EAAAxC,EAAA2E,GAAApC,EAAAC,EAAAD,EAAAoC,IAAAF,IACAhC,EAAAzC,EAAAyC,EAAAzC,EAAA4E,GAAArC,EAAAE,EAAAF,EAAAqC,IAAAH,IACAkB,EAAA/C,KAAAgD,KAAApD,IAAAC,KACAkD,KAAAmB,EAAA5G,IAAAyF,EAAAiB,EAAAG,EAAA7G,GACAsC,GAAAmD,EAAAlD,GAAAkD,EACA3F,EAAA2E,IAAAnC,GAAAqE,EAAAG,EAAA9G,IACAF,EAAA4E,IAAAnC,EAAAoE,EACAtE,EAAAoC,IAAAnC,GAAAqE,EAAA,EAAAA,GACAtE,EAAAqC,IAAAnC,EAAAoE,EAKA,QAAAvC,KACA,GAAAlD,EAAA,CAEA,GAAAlB,GAIAsG,EAHArC,EAAA/C,EAAAjB,OACAb,EAAAoE,EAAAvD,OACA8G,EAAAnD,EAAAoD,IAAA9F,EAAAjC,EAGA,KAAAe,EAAA,EAAAyG,EAAA,GAAAJ,OAAApC,GAAuCjE,EAAAiE,IAAOjE,EAC9CyG,EAAAzG,GAAA,CAGA,KAAAA,EAAA,EAAiBA,EAAAZ,IAAOY,EACxBsG,EAAA9C,EAAAxD,GAAAsG,EAAAd,MAAAxF,EACA,gBAAAsG,GAAAjE,SAAAiE,EAAAjE,OAAA0E,EAAAE,IAAAX,EAAAjE,SACA,gBAAAiE,GAAAxG,SAAAwG,EAAAxG,OAAAiH,EAAAE,IAAAX,EAAAxG,WACA2G,EAAAH,EAAAjE,OAAAmD,SAAAiB,EAAAH,EAAAxG,OAAA0F,MAGA,KAAAxF,EAAA,EAAA8G,EAAA,GAAAT,OAAAjH,GAAsCY,EAAAZ,IAAOY,EAC7CsG,EAAA9C,EAAAxD,GAAA8G,EAAA9G,GAAAyG,EAAAH,EAAAjE,OAAAmD,QAAAiB,EAAAH,EAAAjE,OAAAmD,OAAAiB,EAAAH,EAAAxG,OAAA0F,OAGAqB,GAAA,GAAAR,OAAAjH,GAAA8H,IACAN,EAAA,GAAAP,OAAAjH,GAAA+H,KAGA,QAAAD,KACA,GAAAhG,EAEA,OAAAlB,GAAA,EAAAiE,EAAAT,EAAAvD,OAAuCD,EAAAiE,IAAOjE,EAC9C6G,EAAA7G,IAAA2F,EAAAnC,EAAAxD,KAAAwD,GAIA,QAAA2D,KACA,GAAAjG,EAEA,OAAAlB,GAAA,EAAAiE,EAAAT,EAAAvD,OAAuCD,EAAAiE,IAAOjE,EAC9C4G,EAAA5G,IAAAyD,EAAAD,EAAAxD,KAAAwD,GAzEA,GAEAqD,GAEAD,EACA1F,EACAuF,EACAK,EAPA7H,EAAAuG,EACAG,EAAAY,EAEA9C,EAAAa,EAAA,IAKAyB,EAAA,CA8FA,OA5FA,OAAAvC,UAmEAN,EAAAkB,WAAA,SAAAC,GACAnD,EAAAmD,EACAD,KAGAlB,EAAAM,MAAA,SAAAa,GACA,MAAAtD,WAAAd,QAAAuD,EAAAa,EAAAD,IAAAlB,GAAAM,GAGAN,EAAAjE,GAAA,SAAAoF,GACA,MAAAtD,WAAAd,QAAAhB,EAAAoF,EAAAnB,GAAAjE,GAGAiE,EAAA6C,WAAA,SAAA1B,GACA,MAAAtD,WAAAd,QAAA8F,GAAA1B,EAAAnB,GAAA6C,GAGA7C,EAAAyC,SAAA,SAAAtB,GACA,MAAAtD,WAAAd,QAAA0F,EAAA,kBAAAtB,KAAAC,GAAAD,GAAA6C,IAAAhE,GAAAyC,GAGAzC,EAAAO,SAAA,SAAAY,GACA,MAAAtD,WAAAd,QAAAwD,EAAA,kBAAAY,KAAAC,GAAAD,GAAA8C,IAAAjE,GAAAO,GAGAP,EAGA,QAAAkE,GAAAjF,GACA,MAAAA,GAAAG,EAGA,QAAA+E,GAAAlF,GACA,MAAAA,GAAAI,EAKA,QAAAS,GAAA9B,GAaA,QAAAoG,KACAC,IACAC,EAAArI,KAAA,OAAA6D,GACA0D,EAAAe,IACAC,EAAAC,OACAH,EAAArI,KAAA,MAAA6D,IAIA,QAAAuE,KACA,GAAAvH,GAAAgE,EAAAC,EAAA/C,EAAAjB,MAQA,KANAyG,IAAAkB,EAAAlB,GAAAmB,EAEAC,EAAAC,KAAA,SAAA7E,GACAA,EAAAwD,KAGA1G,EAAA,EAAiBA,EAAAiE,IAAOjE,EACxBgE,EAAA9C,EAAAlB,GACA,MAAAgE,EAAAgE,GAAAhE,EAAA1B,GAAA0B,EAAAS,IAAAwD,GACAjE,EAAA1B,EAAA0B,EAAAgE,GAAAhE,EAAAS,GAAA,GACA,MAAAT,EAAAkE,GAAAlE,EAAAzB,GAAAyB,EAAAU,IAAAuD,GACAjE,EAAAzB,EAAAyB,EAAAkE,GAAAlE,EAAAU,GAAA,GAIA,QAAAyD,KACA,OAAAnE,GAAAhE,EAAA,EAAAiE,EAAA/C,EAAAjB,OAA6CD,EAAAiE,IAAOjE,EAAA,CAEpD,GADAgE,EAAA9C,EAAAlB,GAAAgE,EAAAwB,MAAAxF,EACAoI,MAAApE,EAAA1B,IAAA8F,MAAApE,EAAAzB,GAAA,CACA,GAAAqC,GAAAyD,EAAA3F,KAAAgD,KAAA1F,GAAAsI,EAAAtI,EAAAuI,CACAvE,GAAA1B,EAAAsC,EAAAlC,KAAA8F,IAAAF,GACAtE,EAAAzB,EAAAqC,EAAAlC,KAAA+F,IAAAH,IAEAF,MAAApE,EAAAS,KAAA2D,MAAApE,EAAAU,OACAV,EAAAS,GAAAT,EAAAU,GAAA,IAKA,QAAAgE,GAAAxF,GAEA,MADAA,GAAAkB,YAAAlB,EAAAkB,WAAAlD,GACAgC,EAvDA,GAAAF,GACA0D,EAAA,EACAe,EAAA,KACAI,EAAA,EAAAnF,KAAAiG,IAAAlB,EAAA,OACAG,EAAA,EACAK,EAAA,GACAH,EAAAlE,EAAAoD,MACAU,EAAA5D,EAAA8E,MAAAtB,GACAE,EAAA3D,EAAAgF,SAAA,aAoDA,OAlDA,OAAA3H,UAgDAiH,IAEAnF,GACAuE,OAEAuB,QAAA,WACA,MAAApB,GAAAoB,QAAAxB,GAAAtE,GAGA2E,KAAA,WACA,MAAAD,GAAAC,OAAA3E,GAGA9B,MAAA,SAAAmD,GACA,MAAAtD,WAAAd,QAAAiB,EAAAmD,EAAA8D,IAAAL,EAAAC,KAAAW,GAAA1F,GAAA9B,GAGAwF,MAAA,SAAArC,GACA,MAAAtD,WAAAd,QAAAyG,GAAArC,EAAArB,GAAA0D,GAGAe,SAAA,SAAApD,GACA,MAAAtD,WAAAd,QAAAwH,GAAApD,EAAArB,GAAAyE,GAGAI,WAAA,SAAAxD,GACA,MAAAtD,WAAAd,QAAA4H,GAAAxD,EAAArB,IAAA6E,GAGAD,YAAA,SAAAvD,GACA,MAAAtD,WAAAd,QAAA2H,GAAAvD,EAAArB,GAAA4E,GAGAK,cAAA,SAAA5D,GACA,MAAAtD,WAAAd,QAAAgI,EAAA,EAAA5D,EAAArB,GAAA,EAAAiF,GAGA/E,MAAA,SAAA6F,EAAA1E,GACA,MAAAtD,WAAAd,OAAA,SAAAoE,EAAAyD,EAAAkB,OAAAD,GAAAjB,EAAAmB,IAAAF,EAAAL,EAAArE,IAAArB,GAAA8E,EAAAb,IAAA8B,IAGAG,KAAA,SAAA5G,EAAAC,EAAAqC,GACA,GAEAuE,GACAC,EACAC,EACArF,EACAsF,EANAtJ,EAAA,EACAiE,EAAA/C,EAAAjB,MAUA,KAHA,MAAA2E,IAAA2E,IACA3E,KAEA5E,EAAA,EAAmBA,EAAAiE,IAAOjE,EAC1BgE,EAAA9C,EAAAlB,GACAmJ,EAAA7G,EAAA0B,EAAA1B,EACA8G,EAAA7G,EAAAyB,EAAAzB,EACA8G,EAAAF,IAAAC,IACAC,EAAAzE,IAAA0E,EAAAtF,EAAAY,EAAAyE,EAGA,OAAAC,IAGAhG,GAAA,SAAAyF,EAAA1E,GACA,MAAAtD,WAAAd,OAAA,GAAAuH,EAAAlE,GAAAyF,EAAA1E,GAAArB,GAAAwE,EAAAlE,GAAAyF,KAKA,QAAAS,KAUA,QAAAtG,GAAAmB,GACA,GAAArE,GAAAiE,EAAA/C,EAAAjB,OAAA4F,EAAAlC,EAAAqC,SAAA9E,EAAAkG,EAAAC,GAAApB,WAAAwD,EACA,KAAA/C,EAAArC,EAAArE,EAAA,EAA4BA,EAAAiE,IAAOjE,EAAAgE,EAAA9C,EAAAlB,GAAA6F,EAAAO,MAAAvB,GAGnC,QAAAT,KACA,GAAAlD,EAAA,CACA,GAAAlB,GAAAiE,EAAA/C,EAAAjB,MAEA,KADA4G,EAAA,GAAAR,OAAApC,GACAjE,EAAA,EAAiBA,EAAAiE,IAAOjE,EAAA6G,EAAA7G,IAAA2F,EAAAzE,EAAAlB,KAAAkB,IAGxB,QAAAuI,GAAA3E,GACA,GAAA4E,GAAArK,EAAAiD,EAAAC,EAAAvC,EAAA2F,EAAA,CAGA,IAAAb,EAAA7E,OAAA,CACA,IAAAqC,EAAAC,EAAAvC,EAAA,EAA2BA,EAAA,IAAOA,GAClC0J,EAAA5E,EAAA9E,MAAAX,EAAAqK,EAAAnI,SACAoE,GAAAtG,EAAAiD,GAAAjD,EAAAqK,EAAApH,EAAAC,GAAAlD,EAAAqK,EAAAnH,EAGAuC,GAAAxC,IAAAqD,EACAb,EAAAvC,IAAAoD,MAIA,CACA+D,EAAA5E,EACA4E,EAAApH,EAAAoH,EAAA5I,KAAAwB,EACAoH,EAAAnH,EAAAmH,EAAA5I,KAAAyB,CACA,GAAAoD,IAAAkB,EAAA6C,EAAA5I,KAAA0E,aACAkE,IAAAC,MAGA7E,EAAAvD,MAAAoE,EAGA,QAAAd,GAAAC,EAAAG,EAAAZ,EAAAuF,GACA,IAAA9E,EAAAvD,MAAA,QAEA,IAAAe,GAAAwC,EAAAxC,EAAA0B,EAAA1B,EACAC,EAAAuC,EAAAvC,EAAAyB,EAAAzB,EACAsH,EAAAD,EAAA3E,EACAQ,EAAAnD,IAAAC,GAIA,IAAAsH,IAAAC,EAAArE,EAQA,MAPAA,GAAAsE,IACA,IAAAzH,MAAAiC,IAAAkB,GAAAnD,KACA,IAAAC,MAAAgC,IAAAkB,GAAAlD,KACAkD,EAAAuE,IAAAvE,EAAA/C,KAAAgD,KAAAsE,EAAAvE,IACAzB,EAAAS,IAAAnC,EAAAwC,EAAAvD,MAAAmF,EAAAjB,EACAzB,EAAAU,IAAAnC,EAAAuC,EAAAvD,MAAAmF,EAAAjB,IAEA,CAIA,MAAAX,EAAA7E,QAAAwF,GAAAsE,GAAA,EAGAjF,EAAAhE,OAAAkD,GAAAc,EAAA6E,QACA,IAAArH,MAAAiC,IAAAkB,GAAAnD,KACA,IAAAC,MAAAgC,IAAAkB,GAAAlD,KACAkD,EAAAuE,IAAAvE,EAAA/C,KAAAgD,KAAAsE,EAAAvE,IAGA,GAAAX,GAAAhE,OAAAkD,IACA6F,EAAAhD,EAAA/B,EAAAhE,KAAA0E,OAAAkB,EAAAjB,EACAzB,EAAAS,IAAAnC,EAAAuH,EACA7F,EAAAU,IAAAnC,EAAAsH,SACO/E,IAAA6E,OAlFP,GAAAzI,GACA8C,EACA0C,EAEAG,EADAlB,EAAArB,OAEA0F,EAAA,EACAD,EAAAR,IACAO,EAAA,GAmGA,OArBA5G,GAAAkB,WAAA,SAAAC,GACAnD,EAAAmD,EACAD,KAGAlB,EAAAyC,SAAA,SAAAtB,GACA,MAAAtD,WAAAd,QAAA0F,EAAA,kBAAAtB,KAAAC,GAAAD,GAAAD,IAAAlB,GAAAyC,GAGAzC,EAAA+G,YAAA,SAAA5F,GACA,MAAAtD,WAAAd,QAAA+J,EAAA3F,IAAAnB,GAAAR,KAAAgD,KAAAsE,IAGA9G,EAAAgH,YAAA,SAAA7F,GACA,MAAAtD,WAAAd,QAAA8J,EAAA1F,IAAAnB,GAAAR,KAAAgD,KAAAqE,IAGA7G,EAAAiH,MAAA,SAAA9F,GACA,MAAAtD,WAAAd,QAAA6J,EAAAzF,IAAAnB,GAAAR,KAAAgD,KAAAoE,IAGA5G,EAGA,QAAAkH,GAAA9H,GAQA,QAAAY,GAAAwD,GACA,OAAA1C,GAAAhE,EAAA,EAAAiE,EAAA/C,EAAAjB,OAA6CD,EAAAiE,IAAOjE,EACpDgE,EAAA9C,EAAAlB,GAAAgE,EAAAS,KAAA4F,EAAArK,GAAAgE,EAAA1B,GAAAuE,EAAA7G,GAAA0G,EAIA,QAAAtC,KACA,GAAAlD,EAAA,CACA,GAAAlB,GAAAiE,EAAA/C,EAAAjB,MAGA,KAFA4G,EAAA,GAAAR,OAAApC,GACAoG,EAAA,GAAAhE,OAAApC,GACAjE,EAAA,EAAiBA,EAAAiE,IAAOjE,EACxB6G,EAAA7G,GAAAoI,MAAAiC,EAAArK,IAAAsC,EAAApB,EAAAlB,KAAAkB,IAAA,GAAAyE,EAAAzE,EAAAlB,KAAAkB,IAnBA,GACAA,GACA2F,EACAwD,EAHA1E,EAAArB,EAAA,GAoCA,OA/BA,kBAAAhC,OAAAgC,EAAA,MAAAhC,EAAA,GAAAA,IAkBAY,EAAAkB,WAAA,SAAAC,GACAnD,EAAAmD,EACAD,KAGAlB,EAAAyC,SAAA,SAAAtB,GACA,MAAAtD,WAAAd,QAAA0F,EAAA,kBAAAtB,KAAAC,GAAAD,GAAAD,IAAAlB,GAAAyC,GAGAzC,EAAAZ,EAAA,SAAA+B,GACA,MAAAtD,WAAAd,QAAAqC,EAAA,kBAAA+B,KAAAC,GAAAD,GAAAD,IAAAlB,GAAAZ,GAGAY,EAGA,QAAAoH,GAAA/H,GAQA,QAAAW,GAAAwD,GACA,OAAA1C,GAAAhE,EAAA,EAAAiE,EAAA/C,EAAAjB,OAA6CD,EAAAiE,IAAOjE,EACpDgE,EAAA9C,EAAAlB,GAAAgE,EAAAU,KAAA6F,EAAAvK,GAAAgE,EAAAzB,GAAAsE,EAAA7G,GAAA0G,EAIA,QAAAtC,KACA,GAAAlD,EAAA,CACA,GAAAlB,GAAAiE,EAAA/C,EAAAjB,MAGA,KAFA4G,EAAA,GAAAR,OAAApC,GACAsG,EAAA,GAAAlE,OAAApC,GACAjE,EAAA,EAAiBA,EAAAiE,IAAOjE,EACxB6G,EAAA7G,GAAAoI,MAAAmC,EAAAvK,IAAAuC,EAAArB,EAAAlB,KAAAkB,IAAA,GAAAyE,EAAAzE,EAAAlB,KAAAkB,IAnBA,GACAA,GACA2F,EACA0D,EAHA5E,EAAArB,EAAA,GAoCA,OA/BA,kBAAA/B,OAAA+B,EAAA,MAAA/B,EAAA,GAAAA,IAkBAW,EAAAkB,WAAA,SAAAC,GACAnD,EAAAmD,EACAD,KAGAlB,EAAAyC,SAAA,SAAAtB,GACA,MAAAtD,WAAAd,QAAA0F,EAAA,kBAAAtB,KAAAC,GAAAD,GAAAD,IAAAlB,GAAAyC,GAGAzC,EAAAX,EAAA,SAAA8B,GACA,MAAAtD,WAAAd,QAAAsC,EAAA,kBAAA8B,KAAAC,GAAAD,GAAAD,IAAAlB,GAAAX,GAGAW,EA9TA,GAAAmF,GAAA,GACAE,EAAA7F,KAAAC,IAAA,EAAAD,KAAAgD,KAAA,GAgUAlH,GAAA6E,YAAAU,EACAvF,EAAAgM,aAAA7F,EACAnG,EAAA2E,UAAAmD,EACA9H,EAAA4E,cAAAoG,EACAhL,EAAAyE,gBAAAD,EACAxE,EAAAiM,OAAAL,EACA5L,EAAAkM,OAAAJ,EAEAhK,OAAAC,eAAA/B,EAAA,cAAgD+C,OAAA,OJmK1C,SAAS9C,EAAQD,EAASM,IK/uBhC,SAAA4E,EAAAnF,GACAA,EAAAC,IAGCI,KAAA,SAAAJ,GAA2B,YAE5B,SAAAmM,GAAAxI,GACA,GAAAG,IAAA1D,KAAAgM,GAAAzL,KAAA,KAAAgD,GACAI,GAAA3D,KAAAiM,GAAA1L,KAAA,KAAAgD,EACA,OAAA2I,GAAAlM,KAAAmM,MAAAzI,EAAAC,GAAAD,EAAAC,EAAAJ,GAGA,QAAA2I,GAAAjF,EAAAvD,EAAAC,EAAAJ,GACA,GAAAiG,MAAA9F,IAAA8F,MAAA7F,GAAA,MAAAsD,EAEA,IAAAmF,GAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAtL,EACAuL,EAbAvH,EAAA6B,EAAA2F,MACAC,GAAgB3K,KAAAqB,GAChB4C,EAAAc,EAAA6F,IACA1G,EAAAa,EAAA8F,IACA1G,EAAAY,EAAA+F,IACA1G,EAAAW,EAAAgG,GAWA,KAAA7H,EAAA,MAAA6B,GAAA2F,MAAAC,EAAA5F,CAGA,MAAA7B,EAAA/D,QAGA,IAFAoL,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAqDhG,EAAAgG,GACrDK,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAsDhG,EAAAgG,EACtDF,EAAAhH,QAAAhE,EAAAsL,GAAA,EAAAD,IAAA,MAAAL,GAAAhL,GAAAyL,EAAA5F,CAMA,IAFAsF,GAAAtF,EAAA+E,GAAAzL,KAAA,KAAA6E,EAAAlD,MACAsK,GAAAvF,EAAAgF,GAAA1L,KAAA,KAAA6E,EAAAlD,MACAwB,IAAA6I,GAAA5I,IAAA6I,EAAA,MAAAK,GAAA9B,KAAA3F,EAAAgH,IAAAhL,GAAAyL,EAAA5F,EAAA2F,MAAAC,EAAA5F,CAGA,GACAmF,OAAAhL,GAAA,GAAAqG,OAAA,GAAAR,EAAA2F,MAAA,GAAAnF,OAAA,IACAgF,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAqDhG,EAAAgG,GACrDK,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAsDhG,EAAAgG,SACjDlL,EAAAsL,GAAA,EAAAD,MAAAE,GAAAH,GAAAF,IAAA,EAAAC,GAAAF,GACL,OAAAD,GAAAO,GAAAvH,EAAAgH,EAAAhL,GAAAyL,EAAA5F,EAGA,QAAAiG,GAAAhL,GACA,GAAAqB,GAAAnC,EACAsC,EACAC,EAFA0B,EAAAnD,EAAAb,OAGAoK,EAAA,GAAAhE,OAAApC,GACAsG,EAAA,GAAAlE,OAAApC,GACAc,EAAAwE,IACAvE,EAAAuE,IACAtE,IAAAsE,KACArE,IAAAqE,IAGA,KAAAvJ,EAAA,EAAeA,EAAAiE,IAAOjE,EACtBoI,MAAA9F,GAAA1D,KAAAgM,GAAAzL,KAAA,KAAAgD,EAAArB,EAAAd,MAAAoI,MAAA7F,GAAA3D,KAAAiM,GAAA1L,KAAA,KAAAgD,MACAkI,EAAArK,GAAAsC,EACAiI,EAAAvK,GAAAuC,EACAD,EAAAyC,MAAAzC,GACAA,EAAA2C,MAAA3C,GACAC,EAAAyC,MAAAzC,GACAA,EAAA2C,MAAA3C,GAWA,KAPA0C,EAAAF,MAAAnG,KAAA8M,IAAAzG,EAAArG,KAAAgN,KACA1G,EAAAF,MAAApG,KAAA+M,IAAAzG,EAAAtG,KAAAiN,KAGAjN,KAAAmM,MAAAhG,EAAAC,GAAA+F,MAAA9F,EAAAC,GAGAlF,EAAA,EAAeA,EAAAiE,IAAOjE,EACtB8K,EAAAlM,KAAAyL,EAAArK,GAAAuK,EAAAvK,GAAAc,EAAAd,GAGA,OAAApB,MAGA,QAAAmN,GAAAzJ,EAAAC,GACA,GAAA6F,MAAA9F,OAAA8F,MAAA7F,MAAA,MAAA3D,KAEA,IAAAmG,GAAAnG,KAAA8M,IACA1G,EAAApG,KAAA+M,IACA1G,EAAArG,KAAAgN,IACA1G,EAAAtG,KAAAiN,GAKA,IAAAzD,MAAArD,GACAE,GAAAF,EAAArC,KAAAsJ,MAAA1J,IAAA,EACA4C,GAAAF,EAAAtC,KAAAsJ,MAAAzJ,IAAA,MAIA,MAAAwC,EAAAzC,KAAA2C,GAAAD,EAAAzC,KAAA2C,GAiCA,MAAAtG,KAhCA,IAEAoM,GACAhL,EAHAiM,EAAAhH,EAAAF,EACAf,EAAApF,KAAA4M,KAIA,QAAAxL,GAAAuC,GAAAyC,EAAAE,GAAA,MAAA5C,GAAAyC,EAAAE,GAAA,GACA,OACA,EAAA+F,GAAA,GAAA3E,OAAA,GAAA2E,EAAAhL,GAAAgE,IAAAgH,QACAiB,GAAA,EAAAhH,EAAAF,EAAAkH,EAAA/G,EAAAF,EAAAiH,EAAA3J,EAAA2C,GAAA1C,EAAA2C,EACA,MAEA,QACA,EAAA8F,GAAA,GAAA3E,OAAA,GAAA2E,EAAAhL,GAAAgE,IAAAgH,QACAiB,GAAA,EAAAlH,EAAAE,EAAAgH,EAAA/G,EAAAF,EAAAiH,EAAAlH,EAAAzC,GAAAC,EAAA2C,EACA,MAEA,QACA,EAAA8F,GAAA,GAAA3E,OAAA,GAAA2E,EAAAhL,GAAAgE,IAAAgH,QACAiB,GAAA,EAAAhH,EAAAF,EAAAkH,EAAAjH,EAAAE,EAAA+G,EAAA3J,EAAA2C,GAAAD,EAAAzC,EACA,MAEA,QACA,EAAAyI,GAAA,GAAA3E,OAAA,GAAA2E,EAAAhL,GAAAgE,IAAAgH,QACAiB,GAAA,EAAAlH,EAAAE,EAAAgH,EAAAjH,EAAAE,EAAA+G,EAAAlH,EAAAzC,GAAA0C,EAAAzC,GAKA3D,KAAA4M,OAAA5M,KAAA4M,MAAAvL,SAAArB,KAAA4M,MAAAxH,GAUA,MAJApF,MAAA8M,IAAA3G,EACAnG,KAAA+M,IAAA3G,EACApG,KAAAgN,IAAA3G,EACArG,KAAAiN,IAAA3G,EACAtG,KAGA,QAAAsN,KACA,GAAApL,KAIA,OAHAlC,MAAAwH,MAAA,SAAApC,GACA,IAAAA,EAAA/D,OAAA,EAAAa,GAAAqL,KAAAnI,EAAAlD,YAAgDkD,IAAA2F,QAEhD7I,EAGA,QAAAsL,GAAA/H,GACA,MAAAtD,WAAAd,OACArB,KAAAmM,OAAA1G,EAAA,OAAAA,EAAA,OAAA0G,OAAA1G,EAAA,OAAAA,EAAA,OACA+D,MAAAxJ,KAAA8M,KAAA1K,SAAApC,KAAA8M,IAAA9M,KAAA+M,MAAA/M,KAAAgN,IAAAhN,KAAAiN,MAGA,QAAAQ,GAAArI,EAAAe,EAAAC,EAAAC,EAAAC,GACAtG,KAAAoF,OACApF,KAAAmG,KACAnG,KAAAoG,KACApG,KAAAqG,KACArG,KAAAsG,KAGA,QAAAoH,GAAAhK,EAAAC,EAAAqC,GACA,GAAA9D,GAGAmE,EACAC,EACA0E,EACA2C,EAKA7C,EACA1J,EAXA+E,EAAAnG,KAAA8M,IACA1G,EAAApG,KAAA+M,IAKAa,EAAA5N,KAAAgN,IACAa,EAAA7N,KAAAiN,IACAa,KACA1I,EAAApF,KAAA4M,KAYA,KARAxH,GAAA0I,EAAAP,KAAA,GAAAE,GAAArI,EAAAe,EAAAC,EAAAwH,EAAAC,IACA,MAAA7H,IAAA2E,KAEAxE,EAAAzC,EAAAsC,EAAAI,EAAAzC,EAAAqC,EACA4H,EAAAlK,EAAAsC,EAAA6H,EAAAlK,EAAAqC,EACAA,MAGA8E,EAAAgD,EAAAC,OAGA,OAAA3I,EAAA0F,EAAA1F,QACAiB,EAAAyE,EAAA3E,IAAAyH,IACAtH,EAAAwE,EAAA1E,IAAAyH,IACA7C,EAAAF,EAAAzE,IAAAF,IACAwH,EAAA7C,EAAAxE,IAAAF,GAGA,GAAAhB,EAAA/D,OAAA,CACA,GAAAgL,IAAAhG,EAAA2E,GAAA,EACAsB,GAAAhG,EAAAqH,GAAA,CAEAG,GAAAP,KACA,GAAAE,GAAArI,EAAA,GAAAiH,EAAAC,EAAAtB,EAAA2C,GACA,GAAAF,GAAArI,EAAA,GAAAiB,EAAAiG,EAAAD,EAAAsB,GACA,GAAAF,GAAArI,EAAA,GAAAiH,EAAA/F,EAAA0E,EAAAsB,GACA,GAAAmB,GAAArI,EAAA,GAAAiB,EAAAC,EAAA+F,EAAAC,KAIAlL,GAAAuC,GAAA2I,IAAA,EAAA5I,GAAA2I,KACAvB,EAAAgD,IAAAzM,OAAA,GACAyM,IAAAzM,OAAA,GAAAyM,IAAAzM,OAAA,EAAAD,GACA0M,IAAAzM,OAAA,EAAAD,GAAA0J,OAKA,CACA,GAAAP,GAAA7G,GAAA1D,KAAAgM,GAAAzL,KAAA,KAAA6E,EAAAlD,MACAsI,EAAA7G,GAAA3D,KAAAiM,GAAA1L,KAAA,KAAA6E,EAAAlD,MACAuI,EAAAF,IAAAC,GACA,IAAAC,EAAAzE,EAAA,CACA,GAAAzC,GAAAO,KAAAgD,KAAAd,EAAAyE,EACAtE,GAAAzC,EAAAH,EAAA6C,EAAAzC,EAAAJ,EACAqK,EAAAlK,EAAAH,EAAAsK,EAAAlK,EAAAJ,EACArB,EAAAkD,EAAAlD,MAKA,MAAAA,GAGA,QAAA8L,GAAAzK,GACA,GAAAiG,MAAA9F,GAAA1D,KAAAgM,GAAAzL,KAAA,KAAAgD,KAAAiG,MAAA7F,GAAA3D,KAAAiM,GAAA1L,KAAA,KAAAgD,IAAA,MAAAvD,KAEA,IAAAoM,GAEA6B,EACAC,EACAnD,EAKArH,EACAC,EACA0I,EACAC,EACAG,EACAC,EACAtL,EACAuL,EAfAvH,EAAApF,KAAA4M,MAIAzG,EAAAnG,KAAA8M,IACA1G,EAAApG,KAAA+M,IACA1G,EAAArG,KAAAgN,IACA1G,EAAAtG,KAAAiN,GAWA,KAAA7H,EAAA,MAAApF,KAIA,IAAAoF,EAAA/D,OAAA,QAGA,IAFAoL,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAqDhG,EAAAgG,GACrDK,EAAA/I,IAAA2I,GAAAlG,EAAAE,GAAA,IAAAF,EAAAkG,EAAsDhG,EAAAgG,EACtDF,EAAAhH,QAAAhE,EAAAsL,GAAA,EAAAD,IAAA,MAAAzM,KACA,KAAAoF,EAAA/D,OAAA,OACA+K,EAAAhL,EAAA,MAAAgL,EAAAhL,EAAA,MAAAgL,EAAAhL,EAAA,QAAA6M,EAAA7B,EAAAO,EAAAvL,GAIA,KAAAgE,EAAAlD,OAAAqB,GAAA,GAAA2K,EAAA9I,QAAA2F,MAAA,MAAA/K,KAIA,QAHA+K,EAAA3F,EAAA2F,aAAA3F,GAAA2F,KAGAmD,GAAAnD,EAAAmD,EAAAnD,aAAAmD,GAAAnD,KAAA/K,MAGAoM,GAGArB,EAAAqB,EAAAhL,GAAA2J,QAAAqB,GAAAhL,IAGAgE,EAAAgH,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KACAhH,KAAAgH,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,MACAhH,EAAA/D,SACA4M,IAAAtB,GAAAvH,EACApF,KAAA4M,MAAAxH,GAGApF,OAbAA,KAAA4M,MAAA7B,EAAA/K,MAgBA,QAAAmO,GAAAjM,GACA,OAAAd,GAAA,EAAAiE,EAAAnD,EAAAb,OAAoCD,EAAAiE,IAAOjE,EAAApB,KAAAoK,OAAAlI,EAAAd,GAC3C,OAAApB,MAGA,QAAAoO,KACA,MAAApO,MAAA4M,MAGA,QAAAyB,KACA,GAAAC,GAAA,CAIA,OAHAtO,MAAAwH,MAAA,SAAApC,GACA,IAAAA,EAAA/D,OAAA,IAAAiN,QAAkClJ,IAAA2F,QAElCuD,EAGA,QAAAC,GAAAC,GACA,GAAA1D,GAAA2D,EAAAtI,EAAAC,EAAAC,EAAAC,EAAAwH,KAAA1I,EAAApF,KAAA4M,KAEA,KADAxH,GAAA0I,EAAAP,KAAA,GAAAE,GAAArI,EAAApF,KAAA8M,IAAA9M,KAAA+M,IAAA/M,KAAAgN,IAAAhN,KAAAiN,MACAnC,EAAAgD,EAAAC,OACA,IAAAS,EAAApJ,EAAA0F,EAAA1F,KAAAe,EAAA2E,EAAA3E,GAAAC,EAAA0E,EAAA1E,GAAAC,EAAAyE,EAAAzE,GAAAC,EAAAwE,EAAAxE,KAAAlB,EAAA/D,OAAA,CACA,GAAAgL,IAAAlG,EAAAE,GAAA,EAAAiG,GAAAlG,EAAAE,GAAA,GACAmI,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAApC,EAAAC,EAAAjG,EAAAC,KACAmI,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAAtI,EAAAmG,EAAAD,EAAA/F,KACAmI,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAApC,EAAAjG,EAAAC,EAAAiG,KACAmC,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAAtI,EAAAC,EAAAiG,EAAAC,IAGA,MAAAtM,MAGA,QAAA0O,GAAAF,GACA,GAAA1D,GAAAgD,KAAA/C,IAEA,KADA/K,KAAA4M,OAAAkB,EAAAP,KAAA,GAAAE,GAAAzN,KAAA4M,MAAA5M,KAAA8M,IAAA9M,KAAA+M,IAAA/M,KAAAgN,IAAAhN,KAAAiN,MACAnC,EAAAgD,EAAAC,OAAA,CACA,GAAA3I,GAAA0F,EAAA1F,IACA,IAAAA,EAAA/D,OAAA,CACA,GAAAoN,GAAAtI,EAAA2E,EAAA3E,GAAAC,EAAA0E,EAAA1E,GAAAC,EAAAyE,EAAAzE,GAAAC,EAAAwE,EAAAxE,GAAA+F,GAAAlG,EAAAE,GAAA,EAAAiG,GAAAlG,EAAAE,GAAA,GACAmI,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAAtI,EAAAC,EAAAiG,EAAAC,KACAmC,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAApC,EAAAjG,EAAAC,EAAAiG,KACAmC,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAAtI,EAAAmG,EAAAD,EAAA/F,KACAmI,EAAArJ,EAAA,KAAA0I,EAAAP,KAAA,GAAAE,GAAAgB,EAAApC,EAAAC,EAAAjG,EAAAC,IAEAyE,EAAAwC,KAAAzC,GAEA,KAAAA,EAAAC,EAAAgD,OACAS,EAAA1D,EAAA1F,KAAA0F,EAAA3E,GAAA2E,EAAA1E,GAAA0E,EAAAzE,GAAAyE,EAAAxE,GAEA,OAAAtG,MAGA,QAAA2O,GAAApL,GACA,MAAAA,GAAA,GAGA,QAAAqL,GAAAnJ,GACA,MAAAtD,WAAAd,QAAArB,KAAAgM,GAAAvG,EAAAzF,WAAAgM,GAGA,QAAA6C,GAAAtL,GACA,MAAAA,GAAA,GAGA,QAAAuL,GAAArJ,GACA,MAAAtD,WAAAd,QAAArB,KAAAiM,GAAAxG,EAAAzF,WAAAiM,GAGA,QAAA7E,GAAA9E,EAAAoB,EAAAC,GACA,GAAAsD,GAAA,GAAA8H,GAAA,MAAArL,EAAAiL,EAAAjL,EAAA,MAAAC,EAAAkL,EAAAlL,EAAAqL,gBACA,cAAA1M,EAAA2E,IAAAiG,OAAA5K,GAGA,QAAAyM,GAAArL,EAAAC,EAAAwC,EAAAC,EAAAC,EAAAC,GACAtG,KAAAgM,GAAAtI,EACA1D,KAAAiM,GAAAtI,EACA3D,KAAA8M,IAAA3G,EACAnG,KAAA+M,IAAA3G,EACApG,KAAAgN,IAAA3G,EACArG,KAAAiN,IAAA3G,EACAtG,KAAA4M,MAAAxK,OAGA,QAAA6M,GAAApC,GAEA,IADA,GAAAqC,IAAgBhN,KAAA2K,EAAA3K,MAAgB6I,EAAAmE,EAChCrC,IAAA9B,gBAAiD7I,KAAA2K,EAAA3K,KACjD,OAAAgN,GAGA,GAAAC,GAAA/H,EAAArF,UAAAgN,EAAAhN,SAEAoN,GAAAD,KAAA,WACA,GAEA5M,GACAmM,EAHAS,EAAA,GAAAH,GAAA/O,KAAAgM,GAAAhM,KAAAiM,GAAAjM,KAAA8M,IAAA9M,KAAA+M,IAAA/M,KAAAgN,IAAAhN,KAAAiN,KACA7H,EAAApF,KAAA4M,KAIA,KAAAxH,EAAA,MAAA8J,EAEA,KAAA9J,EAAA/D,OAAA,MAAA6N,GAAAtC,MAAAqC,EAAA7J,GAAA8J,CAGA,KADA5M,IAAcmB,OAAA2B,EAAAlE,OAAAgO,EAAAtC,MAAA,GAAAnF,OAAA,KACdrC,EAAA9C,EAAAyL,OACA,OAAA3M,GAAA,EAAqBA,EAAA,IAAOA,GAC5BqN,EAAArJ,EAAA3B,OAAArC,MACAqN,EAAApN,OAAAiB,EAAAiL,MAAwC9J,OAAAgL,EAAAvN,OAAAkE,EAAAlE,OAAAE,GAAA,GAAAqG,OAAA,KACxCrC,EAAAlE,OAAAE,GAAA6N,EAAAR,GAKA,OAAAS,IAGAC,EAAAjD,IAAAH,EACAoD,EAAAjC,SACAiC,EAAAhD,MAAAgB,EACAgC,EAAAjN,KAAAoL,EACA6B,EAAAC,OAAA5B,EACA2B,EAAA7E,KAAAoD,EACAyB,EAAA/E,OAAA4D,EACAmB,EAAAhB,YACAgB,EAAAzP,KAAA0O,EACAe,EAAAb,KAAAD,EACAc,EAAA3H,MAAA+G,EACAY,EAAA9H,WAAAqH,EACAS,EAAAzL,EAAAkL,EACAO,EAAAxL,EAAAmL,EAEAlP,EAAAwH,WAEA1F,OAAAC,eAAA/B,EAAA,cAAgD+C,OAAA,OLwvB1C,SAAS9C,EAAQD,EAASM,IMvqChC,SAAA4E,EAAAnF,GACAA,EAAAC,IAGCI,KAAA,SAAAJ,GAA2B,YAI5B,SAAAyP,MAkDA,QAAAjH,GAAAkH,EAAAC,GACA,GAAAnH,GAAA,GAAAiH,EAGA,IAAAC,YAAAD,GAAAC,EAAAnG,KAAA,SAAAxG,EAAAf,GAAiEwG,EAAAiC,IAAAzI,EAAAe,SAGjE,IAAA8E,MAAA+H,QAAAF,GAAA,CACA,GAEAG,GAFArO,KACAiE,EAAAiK,EAAAjO,MAGA,UAAAkO,EAAA,OAAAnO,EAAAiE,GAAA+C,EAAAiC,IAAAjJ,EAAAkO,EAAAlO,QACA,QAAAA,EAAAiE,GAAA+C,EAAAiC,IAAAkF,EAAAE,EAAAH,EAAAlO,KAAAkO,GAAAG,OAIA,IAAAH,EAAA,OAAA1N,KAAA0N,GAAAlH,EAAAiC,IAAAzI,EAAA0N,EAAA1N,GAEA,OAAAwG,GAGA,QAAAsH,KAOA,QAAAzJ,GAAA0J,EAAAC,EAAAC,EAAAC,GACA,GAAAF,GAAAG,EAAA1O,OAAA,aAAA2O,EACAA,EAAAL,GAAA,MAAAM,EACAN,EAAAO,KAAAD,GACAN,CAWA,KATA,GAGAQ,GACAxN,EAEAyN,EANAhP,KACAiE,EAAAsK,EAAAtO,OACAO,EAAAmO,EAAAH,KAGAS,EAAAjI,IAEAkI,EAAAT,MAEAzO,EAAAiE,IACA+K,EAAAC,EAAAhI,IAAA8H,EAAAvO,EAAAe,EAAAgN,EAAAvO,IAAA,KACAgP,EAAA7C,KAAA5K,GAEA0N,EAAAhG,IAAA8F,GAAAxN,GAQA,OAJA0N,GAAAlH,KAAA,SAAAiH,EAAAxO,GACAkO,EAAAQ,EAAA1O,EAAAqE,EAAAmK,EAAAR,EAAAC,EAAAC,MAGAQ,EAGA,QAAAC,GAAAnI,EAAAwH,GACA,KAAAA,EAAAG,EAAA1O,OAAA,MAAA+G,EACA,IAAAuH,GAAAa,EAAAC,EAAAb,EAAA,EAGA,OAFA,OAAAI,GAAAJ,GAAAG,EAAA1O,OAAAsO,EAAAvH,EAAAmI,WACAZ,KAAAvH,EAAAe,KAAA,SAAAuH,EAAAxJ,GAAgDyI,EAAApC,MAAa3L,IAAAsF,EAAAkJ,OAAAG,EAAAG,EAAAd,QAC7D,MAAAY,EAAAb,EAAAO,KAAA,SAAAS,EAAA5I,GAA0D,MAAAyI,GAAAG,EAAA/O,IAAAmG,EAAAnG,OAAgC+N,EAzC1F,GAEAM,GACAD,EACAN,EAJAK,KACAU,IA2CA,OAAAf,IACAJ,OAAA,SAAAK,GAA+B,MAAA1J,GAAA0J,EAAA,EAAAiB,EAAAC,IAC/BzI,IAAA,SAAAuH,GAA4B,MAAA1J,GAAA0J,EAAA,EAAAmB,EAAAC,IAC5BR,QAAA,SAAAZ,GAAgC,MAAAY,GAAAtK,EAAA0J,EAAA,EAAAmB,EAAAC,GAAA,IAChCnP,IAAA,SAAA2B,GAAsC,MAAdwM,GAAAxC,KAAAhK,GAAcmM,GACtCe,SAAA,SAAAO,GAAoE,MAAnCP,GAAAV,EAAA1O,OAAA,GAAA2P,EAAmCtB,GACpEO,WAAA,SAAAe,GAAuD,MAApBf,GAAAe,EAAoBtB,GACvDM,OAAA,SAAAT,GAAuC,MAAZS,GAAAT,EAAYG,IAIvC,QAAAkB,KACA,SAGA,QAAAC,GAAAvB,EAAA1N,EAAAe,GACA2M,EAAA1N,GAAAe,EAGA,QAAAmO,KACA,MAAA1I,KAGA,QAAA2I,GAAA3I,EAAAxG,EAAAe,GACAyF,EAAAiC,IAAAzI,EAAAe,GAGA,QAAAsO,MAoBA,QAAA5G,GAAAiF,EAAAC,GACA,GAAAlF,GAAA,GAAA4G,EAGA,IAAA3B,YAAA2B,GAAA3B,EAAAnG,KAAA,SAAAxG,GAA4D0H,EAAA6B,IAAAvJ,SAG5D,IAAA2M,EAAA,CACA,GAAAlO,MAAAiE,EAAAiK,EAAAjO,MACA,UAAAkO,EAAA,OAAAnO,EAAAiE,GAAAgF,EAAA6B,IAAAoD,EAAAlO,QACA,QAAAA,EAAAiE,GAAAgF,EAAA6B,IAAAqD,EAAAD,EAAAlO,KAAAkO,IAGA,MAAAjF,GAGA,QAAA0F,GAAA3H,GACA,GAAA2H,KACA,QAAAnO,KAAAwG,GAAA2H,EAAAxC,KAAA3L,EACA,OAAAmO,GAGA,QAAAK,GAAAhI,GACA,GAAAgI,KACA,QAAAxO,KAAAwG,GAAAgI,EAAA7C,KAAAnF,EAAAxG,GACA,OAAAwO,GAGA,QAAAG,GAAAnI,GACA,GAAAmI,KACA,QAAA3O,KAAAwG,GAAAmI,EAAAhD,MAAuC3L,MAAAe,MAAAyF,EAAAxG,IACvC,OAAA2O,GArMA,GAAAW,GAAA,GAIA7B,GAAAtN,UAAAqG,EAAArG,WACAoP,YAAA9B,EACA+B,IAAA,SAAAxP,GACA,MAAAsP,GAAAtP,IAAA5B,OAEAqI,IAAA,SAAAzG,GACA,MAAA5B,MAAAkR,EAAAtP,IAEAyI,IAAA,SAAAzI,EAAAe,GAEA,MADA3C,MAAAkR,EAAAtP,GAAAe,EACA3C,MAEAoK,OAAA,SAAAxI,GACA,GAAAyP,GAAAH,EAAAtP,CACA,OAAAyP,KAAArR,mBAAAqR,IAEAC,MAAA,WACA,OAAAD,KAAArR,MAAAqR,EAAA,KAAAH,SAAAlR,MAAAqR,IAEAtB,KAAA,WACA,GAAAA,KACA,QAAAsB,KAAArR,MAAAqR,EAAA,KAAAH,GAAAnB,EAAAxC,KAAA8D,EAAAE,MAAA,GACA,OAAAxB,IAEAK,OAAA,WACA,GAAAA,KACA,QAAAiB,KAAArR,MAAAqR,EAAA,KAAAH,GAAAd,EAAA7C,KAAAvN,KAAAqR,GACA,OAAAjB,IAEAG,QAAA,WACA,GAAAA,KACA,QAAAc,KAAArR,MAAAqR,EAAA,KAAAH,GAAAX,EAAAhD,MAA2E3L,IAAAyP,EAAAE,MAAA,GAAA5O,MAAA3C,KAAAqR,IAC3E,OAAAd,IAEAjC,KAAA,WACA,GAAAA,GAAA,CACA,QAAA+C,KAAArR,MAAAqR,EAAA,KAAAH,KAAA5C,CACA,OAAAA,IAEAkD,MAAA,WACA,OAAAH,KAAArR,MAAA,GAAAqR,EAAA,KAAAH,EAAA,QACA,WAEA/H,KAAA,SAAAoG,GACA,OAAA8B,KAAArR,MAAAqR,EAAA,KAAAH,GAAA3B,EAAAvP,KAAAqR,KAAAE,MAAA,GAAAvR,OAoGA,IAAAyR,GAAArJ,EAAArG,SAEAkP,GAAAlP,UAAAsI,EAAAtI,WACAoP,YAAAF,EACAG,IAAAK,EAAAL,IACAlF,IAAA,SAAAvJ,GAGA,MAFAA,IAAA,GACA3C,KAAAkR,EAAAvO,KACA3C,MAEAoK,OAAAqH,EAAArH,OACAkH,MAAAG,EAAAH,MACAlB,OAAAqB,EAAA1B,KACAzB,KAAAmD,EAAAnD,KACAkD,MAAAC,EAAAD,MACArI,KAAAsI,EAAAtI,MAqCAvJ,EAAA8P,OACA9P,EAAAyK,MACAzK,EAAAwI,MACAxI,EAAAmQ,OACAnQ,EAAAwQ,SACAxQ,EAAA2Q,UAEA7O,OAAAC,eAAA/B,EAAA,cAAgD+C,OAAA,ONgrC1C,SAAS9C,EAAQD,EAASM,IOr4ChC,SAAA4E,EAAAnF,GACAA,EAAAC,IAGCI,KAAA,SAAAJ,GAA2B,YAI5B,SAAAqK,KACA,OAAgDyH,GAAhDtQ,EAAA,EAAAiE,EAAAlD,UAAAd,OAAAoE,KAAoDrE,EAAAiE,IAAOjE,EAAA,CAC3D,KAAAsQ,EAAAvP,UAAAf,GAAA,KAAAsQ,IAAAjM,GAAA,SAAAkM,OAAA,iBAAAD,EACAjM,GAAAiM,MAEA,UAAAE,GAAAnM,GAGA,QAAAmM,GAAAnM,GACAzF,KAAAyF,IAGA,QAAAoM,GAAAC,EAAAC,GACA,MAAAD,GAAAE,OAAAC,MAAA,SAAA7J,IAAA,SAAAsJ,GACA,GAAAvH,GAAA,GAAA/I,EAAAsQ,EAAAQ,QAAA,IAEA,IADA9Q,GAAA,IAAA+I,EAAAuH,EAAAH,MAAAnQ,EAAA,GAAAsQ,IAAAH,MAAA,EAAAnQ,IACAsQ,IAAAK,EAAAI,eAAAT,GAAA,SAAAC,OAAA,iBAAAD,EACA,QAAcU,KAAAV,EAAAvH,UA6Cd,QAAA9B,GAAA+J,EAAAjI,GACA,OAAA1J,GAAAW,EAAA,EAAAiE,EAAA+M,EAAA/Q,OAAuCD,EAAAiE,IAAOjE,EAC9C,IAAAX,EAAA2R,EAAAhR,IAAA+I,SACA,MAAA1J,GAAAkC,MAKA,QAAA0H,GAAA+H,EAAAjI,EAAAqE,GACA,OAAApN,GAAA,EAAAiE,EAAA+M,EAAA/Q,OAAoCD,EAAAiE,IAAOjE,EAC3C,GAAAgR,EAAAhR,GAAA+I,SAAA,CACAiI,EAAAhR,GAAAiR,EAAAD,IAAAb,MAAA,EAAAnQ,GAAAkR,OAAAF,EAAAb,MAAAnQ,EAAA,GACA,OAIA,MADA,OAAAoN,GAAA4D,EAAA7E,MAAqCpD,OAAAxH,MAAA6L,IACrC4D,EAhFA,GAAAC,IAAc1P,MAAA,aAuBdiP,GAAA7P,UAAAkI,EAAAlI,WACAoP,YAAAS,EACAlN,GAAA,SAAA6N,EAAA/D,GACA,GAEAkD,GAFAjM,EAAAzF,KAAAyF,EACA+M,EAAAX,EAAAU,EAAA,GAAA9M,GAEArE,KACAiE,EAAAmN,EAAAnR,MAGA,OAAAc,UAAAd,OAAA,IAOA,SAAAmN,GAAA,kBAAAA,GAAA,SAAAmD,OAAA,qBAAAnD,EACA,QAAApN,EAAAiE,GACA,GAAAqM,GAAAa,EAAAC,EAAApR,IAAAgR,KAAA3M,EAAAiM,GAAArH,EAAA5E,EAAAiM,GAAAa,EAAApI,KAAAqE,OACA,UAAAA,EAAA,IAAAkD,IAAAjM,KAAAiM,GAAArH,EAAA5E,EAAAiM,GAAAa,EAAApI,KAAA,KAGA,OAAAnK,MAZA,OAAAoB,EAAAiE,GAAA,IAAAqM,GAAAa,EAAAC,EAAApR,IAAAgR,QAAAV,EAAArJ,EAAA5C,EAAAiM,GAAAa,EAAApI,OAAA,MAAAuH,KAcAxC,KAAA,WACA,GAAAA,MAAmBzJ,EAAAzF,KAAAyF,CACnB,QAAAiM,KAAAjM,GAAAyJ,EAAAwC,GAAAjM,EAAAiM,GAAAH,OACA,WAAAK,GAAA1C,IAEA3O,KAAA,SAAA6R,EAAAK,GACA,IAAApN,EAAAlD,UAAAd,OAAA,YAAAgE,GAAAqM,EAAAgB,EAAA,GAAAjL,OAAApC,GAAAjE,EAAA,EAAoFA,EAAAiE,IAAOjE,EAAAsR,EAAAtR,GAAAe,UAAAf,EAAA,EAC3F,KAAApB,KAAAyF,EAAA0M,eAAAC,GAAA,SAAAT,OAAA,iBAAAS,EACA,KAAAV,EAAA1R,KAAAyF,EAAA2M,GAAAhR,EAAA,EAAAiE,EAAAqM,EAAArQ,OAAiDD,EAAAiE,IAAOjE,EAAAsQ,EAAAtQ,GAAAuB,MAAAsD,MAAAwM,EAAAC,IAExDzM,MAAA,SAAAmM,EAAAK,EAAAC,GACA,IAAA1S,KAAAyF,EAAA0M,eAAAC,GAAA,SAAAT,OAAA,iBAAAS,EACA,QAAAV,GAAA1R,KAAAyF,EAAA2M,GAAAhR,EAAA,EAAAiE,EAAAqM,EAAArQ,OAAqDD,EAAAiE,IAAOjE,EAAAsQ,EAAAtQ,GAAAuB,MAAAsD,MAAAwM,EAAAC,KAuB5D9S,EAAAqK,WAEAvI,OAAAC,eAAA/B,EAAA,cAAgD+C,OAAA,OP84C1C,SAAS9C,EAAQD,EAASM,IQz+ChC,SAAA4E,EAAAnF,GACAA,EAAAC,IAGCI,KAAA,SAAAJ,GAA2B,YAe5B,SAAA+S,KACA,MAAAC,KAAAC,EAAAC,GAAAF,EAAAG,EAAAJ,MAAAK,GAGA,QAAAF,KACAF,EAAA,EAGA,QAAAK,KACAjT,KAAAkT,MACAlT,KAAAmT,MACAnT,KAAAoT,MAAA,KA0BA,QAAApJ,GAAAwE,EAAA6E,EAAAC,GACA,GAAA5B,GAAA,GAAAuB,EAEA,OADAvB,GAAAxH,QAAAsE,EAAA6E,EAAAC,GACA5B,EAGA,QAAA6B,KACAZ,MACAa,CAEA,KADA,GAAAC,GAAA/B,EAAAgC,EACAhC,IACA+B,EAAAb,EAAAlB,EAAAyB,QAAA,GAAAzB,EAAAwB,MAAA3S,KAAA,KAAAkT,GACA/B,IAAA0B,QAEAI,EAGA,QAAAG,GAAAL,GACAV,GAAAgB,EAAAN,GAAAP,EAAAJ,OAAAK,EACAQ,EAAAK,EAAA,CACA,KACAN,IACK,QACLC,EAAA,EACAM,IACAlB,EAAA,GAIA,QAAAmB,KACA,GAAApB,GAAAI,EAAAJ,MAAAU,EAAAV,EAAAiB,CACAP,GAAAW,IAAAhB,GAAAK,EAAAO,EAAAjB,GAGA,QAAAmB,KAEA,IADA,GAAAG,GAAAC,EAAAC,EAAAT,EAAAJ,EAAA3I,IACAwJ,GACAA,EAAAjB,OACAI,EAAAa,EAAAhB,QAAAG,EAAAa,EAAAhB,OACAc,EAAAE,MAAAf,QAEAc,EAAAC,EAAAf,MAAAe,EAAAf,MAAA,KACAe,EAAAF,IAAAb,MAAAc,EAAAR,EAAAQ,EAGAE,GAAAH,EACAI,EAAAf,GAGA,QAAAe,GAAAf,GACA,IAAAE,EAAA,CACAK,MAAAS,aAAAT,GACA,IAAAR,GAAAC,EAAAV,CACAS,GAAA,IACAC,EAAA3I,MAAAkJ,EAAAU,WAAAZ,EAAAN,IACAmB,MAAAC,cAAAD,MAEAA,MAAAE,YAAAX,EAAAC,IACAR,EAAA,EAAAX,EAAAc,KAIA,QAAAgB,GAAAnG,EAAA6E,EAAAC,GACA,GAAA5B,GAAA,GAAAuB,EAMA,OALAI,GAAA,MAAAA,EAAA,GAAAA,EACA3B,EAAAxH,QAAA,SAAA0K,GACAlD,EAAA3I,OACAyF,EAAAoG,EAAAvB,IACKA,EAAAC,GACL5B,EAGA,QAAAmD,GAAArG,EAAA6E,EAAAC,GACA,GAAA5B,GAAA,GAAAuB,GAAA6B,EAAAzB,CACA,cAAAA,GAAA3B,EAAAxH,QAAAsE,EAAA6E,EAAAC,GAAA5B,IACA2B,KAAAC,EAAA,MAAAA,EAAAX,KAAAW,EACA5B,EAAAxH,QAAA,QAAAvB,GAAAiM,GACAA,GAAAE,EACApD,EAAAxH,QAAAvB,EAAAmM,GAAAzB,EAAAC,GACA9E,EAAAoG,IACKvB,EAAAC,GACL5B,GAnIA,GAIAgC,GACAU,EALAZ,EAAA,EACAK,EAAA,EACAW,EAAA,EACAR,EAAA,IAGAJ,EAAA,EACAhB,EAAA,EACAI,EAAA,EACAD,EAAA,gBAAAgC,0BAAApC,IAAAoC,YAAAC,KACAnC,EAAA,kBAAAoC,uBACAlC,IAAAiC,KAAA,SAAAzF,GAA2C0F,sBAAA,WAAmC1F,EAAAwD,EAAAJ,UAAsBsC,sBACpG,SAAA1F,GAAyBgF,WAAAhF,EAAA,IAezB0D,GAAAlR,UAAAiI,EAAAjI,WACAoP,YAAA8B,EACA/I,QAAA,SAAAsE,EAAA6E,EAAAC,GACA,qBAAA9E,GAAA,SAAAzN,WAAA,6BACAuS,IAAA,MAAAA,EAAAX,KAAAW,IAAA,MAAAD,EAAA,GAAAA,GACArT,KAAAoT,OAAAgB,IAAApU,OACAoU,IAAAhB,MAAApT,KACA0T,EAAA1T,KACAoU,EAAApU,MAEAA,KAAAkT,MAAA1E,EACAxO,KAAAmT,MAAAG,EACAe,KAEAtL,KAAA,WACA/I,KAAAkT,QACAlT,KAAAkT,MAAA,KACAlT,KAAAmT,MAAAxI,IACA0J,OAyFAzU,EAAA+S,MACA/S,EAAAoK,QACApK,EAAA2T,aACA3T,EAAAiU,QAAAc,EACA/U,EAAA4U,SAAAK,EAEAnT,OAAAC,eAAA/B,EAAA,cAAgD+C,OAAA","file":"brambl.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Brambl\"] = factory();\n\telse\n\t\troot[\"Brambl\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Brambl\"] = factory();\n\telse\n\t\troot[\"Brambl\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// Main export\n\tmodule.exports = {\n\t  Graph: __webpack_require__(1)\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar d3 = __webpack_require__(2);\n\t\n\tvar Graph = function () {\n\t\n\t  /* Create an instance of a brambl \n\t   *\n\t   */\n\t  function Graph(selector) {\n\t    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t    _classCallCheck(this, Graph);\n\t\n\t    this.selector = selector;\n\t    this.options = options;\n\t    this.nodes = data.nodes || [];\n\t    this.edges = data.edges || [];\n\t    this.container = document.querySelector(selector);\n\t  }\n\t\n\t  // Lots of horrible side effects in here at the moment - this is just\n\t  // because the code here is largely a copy/paste job from a d3 example\n\t  // and this whole thing is basically just in \"bootstrapping mode\" at the \n\t  // moment while I get the env set up the way I want it. \n\t  //\n\t  // Don't judge me!!\n\t  //\n\t\n\t\n\t  _createClass(Graph, [{\n\t    key: 'start',\n\t    value: function start() {\n\t\n\t      var canvas = document.createElement('canvas');\n\t      container.appendChild(canvas);\n\t\n\t      var context = canvas.getContext(\"2d\");\n\t\n\t      var width = canvas.width = 1000;\n\t      var height = canvas.height = 500;\n\t\n\t      var simulation = d3.forceSimulation().force(\"link\", d3.forceLink().id(function (d) {\n\t        return d.id;\n\t      })).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n\t\n\t      simulation.nodes(this.nodes).on(\"tick\", redraw.bind(this));\n\t\n\t      simulation.force(\"link\").links(this.edges).distance(function (d) {\n\t        return 100;\n\t      });\n\t\n\t      function redraw() {\n\t        context.clearRect(0, 0, width, height);\n\t\n\t        context.beginPath();\n\t        this.edges.forEach(drawLink);\n\t        context.stroke();\n\t\n\t        context.beginPath();\n\t        this.nodes.forEach(drawNode);\n\t        context.fill();\n\t      }\n\t\n\t      function drawLink(d) {\n\t        context.moveTo(d.source.x, d.source.y);\n\t        context.lineTo(d.target.x, d.target.y);\n\t      }\n\t\n\t      function drawNode(d) {\n\t        context.moveTo(d.x + 3, d.y);\n\t        context.arc(d.x, d.y, 20, 0, 2 * Math.PI);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Graph;\n\t}();\n\t\n\tmodule.exports = Graph;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-force/ Version 1.0.2. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports, __webpack_require__(3), __webpack_require__(4), __webpack_require__(5), __webpack_require__(6)) :\n\t  typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\n\t  (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\n\t}(this, function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\n\t\n\t  function center(x, y) {\n\t    var nodes;\n\t\n\t    if (x == null) x = 0;\n\t    if (y == null) y = 0;\n\t\n\t    function force() {\n\t      var i,\n\t          n = nodes.length,\n\t          node,\n\t          sx = 0,\n\t          sy = 0;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i], sx += node.x, sy += node.y;\n\t      }\n\t\n\t      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n\t        node = nodes[i], node.x -= sx, node.y -= sy;\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = +_, force) : x;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = +_, force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function constant(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function jiggle() {\n\t    return (Math.random() - 0.5) * 1e-6;\n\t  }\n\t\n\t  function x(d) {\n\t    return d.x + d.vx;\n\t  }\n\t\n\t  function y(d) {\n\t    return d.y + d.vy;\n\t  }\n\t\n\t  function collide(radius) {\n\t    var nodes,\n\t        radii,\n\t        strength = 1,\n\t        iterations = 1;\n\t\n\t    if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\t\n\t    function force() {\n\t      var i, n = nodes.length,\n\t          tree,\n\t          node,\n\t          xi,\n\t          yi,\n\t          ri,\n\t          ri2;\n\t\n\t      for (var k = 0; k < iterations; ++k) {\n\t        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          ri = radii[i], ri2 = ri * ri;\n\t          xi = node.x + node.vx;\n\t          yi = node.y + node.vy;\n\t          tree.visit(apply);\n\t        }\n\t      }\n\t\n\t      function apply(quad, x0, y0, x1, y1) {\n\t        var data = quad.data, rj = quad.r, r = ri + rj;\n\t        if (data) {\n\t          if (data.index > i) {\n\t            var x = xi - data.x - data.vx,\n\t                y = yi - data.y - data.vy,\n\t                l = x * x + y * y;\n\t            if (l < r * r) {\n\t              if (x === 0) x = jiggle(), l += x * x;\n\t              if (y === 0) y = jiggle(), l += y * y;\n\t              l = (r - (l = Math.sqrt(l))) / l * strength;\n\t              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n\t              node.vy += (y *= l) * r;\n\t              data.vx -= x * (r = 1 - r);\n\t              data.vy -= y * r;\n\t            }\n\t          }\n\t          return;\n\t        }\n\t        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n\t      }\n\t    }\n\t\n\t    function prepare(quad) {\n\t      if (quad.data) return quad.r = radii[quad.data.index];\n\t      for (var i = quad.r = 0; i < 4; ++i) {\n\t        if (quad[i] && quad[i].r > quad.r) {\n\t          quad.r = quad[i].r;\n\t        }\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      var i, n = (nodes = _).length; radii = new Array(n);\n\t      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = +_, force) : strength;\n\t    };\n\t\n\t    force.radius = function(_) {\n\t      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), force) : radius;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function index(d, i) {\n\t    return i;\n\t  }\n\t\n\t  function link(links) {\n\t    var id = index,\n\t        strength = defaultStrength,\n\t        strengths,\n\t        distance = constant(30),\n\t        distances,\n\t        nodes,\n\t        count,\n\t        bias,\n\t        iterations = 1;\n\t\n\t    if (links == null) links = [];\n\t\n\t    function defaultStrength(link) {\n\t      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n\t    }\n\t\n\t    function force(alpha) {\n\t      for (var k = 0, n = links.length; k < iterations; ++k) {\n\t        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n\t          link = links[i], source = link.source, target = link.target;\n\t          x = target.x + target.vx - source.x - source.vx || jiggle();\n\t          y = target.y + target.vy - source.y - source.vy || jiggle();\n\t          l = Math.sqrt(x * x + y * y);\n\t          l = (l - distances[i]) / l * alpha * strengths[i];\n\t          x *= l, y *= l;\n\t          target.vx -= x * (b = bias[i]);\n\t          target.vy -= y * b;\n\t          source.vx += x * (b = 1 - b);\n\t          source.vy += y * b;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t\n\t      var i,\n\t          n = nodes.length,\n\t          m = links.length,\n\t          nodeById = d3Collection.map(nodes, id),\n\t          link;\n\t\n\t      for (i = 0, count = new Array(n); i < n; ++i) {\n\t        count[i] = 0;\n\t      }\n\t\n\t      for (i = 0; i < m; ++i) {\n\t        link = links[i], link.index = i;\n\t        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n\t        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n\t        ++count[link.source.index], ++count[link.target.index];\n\t      }\n\t\n\t      for (i = 0, bias = new Array(m); i < m; ++i) {\n\t        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n\t      }\n\t\n\t      strengths = new Array(m), initializeStrength();\n\t      distances = new Array(m), initializeDistance();\n\t    }\n\t\n\t    function initializeStrength() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        strengths[i] = +strength(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    function initializeDistance() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        distances[i] = +distance(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.links = function(_) {\n\t      return arguments.length ? (links = _, initialize(), force) : links;\n\t    };\n\t\n\t    force.id = function(_) {\n\t      return arguments.length ? (id = _, force) : id;\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n\t    };\n\t\n\t    force.distance = function(_) {\n\t      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$1(d) {\n\t    return d.x;\n\t  }\n\t\n\t  function y$1(d) {\n\t    return d.y;\n\t  }\n\t\n\t  var initialRadius = 10;\n\t  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n\t  function simulation(nodes) {\n\t    var simulation,\n\t        alpha = 1,\n\t        alphaMin = 0.001,\n\t        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n\t        alphaTarget = 0,\n\t        velocityDecay = 0.6,\n\t        forces = d3Collection.map(),\n\t        stepper = d3Timer.timer(step),\n\t        event = d3Dispatch.dispatch(\"tick\", \"end\");\n\t\n\t    if (nodes == null) nodes = [];\n\t\n\t    function step() {\n\t      tick();\n\t      event.call(\"tick\", simulation);\n\t      if (alpha < alphaMin) {\n\t        stepper.stop();\n\t        event.call(\"end\", simulation);\n\t      }\n\t    }\n\t\n\t    function tick() {\n\t      var i, n = nodes.length, node;\n\t\n\t      alpha += (alphaTarget - alpha) * alphaDecay;\n\t\n\t      forces.each(function(force) {\n\t        force(alpha);\n\t      });\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i];\n\t        if (node.fx == null) node.x += node.vx *= velocityDecay;\n\t        else node.x = node.fx, node.vx = 0;\n\t        if (node.fy == null) node.y += node.vy *= velocityDecay;\n\t        else node.y = node.fy, node.vy = 0;\n\t      }\n\t    }\n\t\n\t    function initializeNodes() {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.index = i;\n\t        if (isNaN(node.x) || isNaN(node.y)) {\n\t          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n\t          node.x = radius * Math.cos(angle);\n\t          node.y = radius * Math.sin(angle);\n\t        }\n\t        if (isNaN(node.vx) || isNaN(node.vy)) {\n\t          node.vx = node.vy = 0;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initializeForce(force) {\n\t      if (force.initialize) force.initialize(nodes);\n\t      return force;\n\t    }\n\t\n\t    initializeNodes();\n\t\n\t    return simulation = {\n\t      tick: tick,\n\t\n\t      restart: function() {\n\t        return stepper.restart(step), simulation;\n\t      },\n\t\n\t      stop: function() {\n\t        return stepper.stop(), simulation;\n\t      },\n\t\n\t      nodes: function(_) {\n\t        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n\t      },\n\t\n\t      alpha: function(_) {\n\t        return arguments.length ? (alpha = +_, simulation) : alpha;\n\t      },\n\t\n\t      alphaMin: function(_) {\n\t        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n\t      },\n\t\n\t      alphaDecay: function(_) {\n\t        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n\t      },\n\t\n\t      alphaTarget: function(_) {\n\t        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n\t      },\n\t\n\t      velocityDecay: function(_) {\n\t        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n\t      },\n\t\n\t      force: function(name, _) {\n\t        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n\t      },\n\t\n\t      find: function(x, y, radius) {\n\t        var i = 0,\n\t            n = nodes.length,\n\t            dx,\n\t            dy,\n\t            d2,\n\t            node,\n\t            closest;\n\t\n\t        if (radius == null) radius = Infinity;\n\t        else radius *= radius;\n\t\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          dx = x - node.x;\n\t          dy = y - node.y;\n\t          d2 = dx * dx + dy * dy;\n\t          if (d2 < radius) closest = node, radius = d2;\n\t        }\n\t\n\t        return closest;\n\t      },\n\t\n\t      on: function(name, _) {\n\t        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n\t      }\n\t    };\n\t  }\n\t\n\t  function manyBody() {\n\t    var nodes,\n\t        node,\n\t        alpha,\n\t        strength = constant(-30),\n\t        strengths,\n\t        distanceMin2 = 1,\n\t        distanceMax2 = Infinity,\n\t        theta2 = 0.81;\n\t\n\t    function force(_) {\n\t      var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n\t      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n\t    }\n\t\n\t    function accumulate(quad) {\n\t      var strength = 0, q, c, x, y, i;\n\t\n\t      // For internal nodes, accumulate forces from child quadrants.\n\t      if (quad.length) {\n\t        for (x = y = i = 0; i < 4; ++i) {\n\t          if ((q = quad[i]) && (c = q.value)) {\n\t            strength += c, x += c * q.x, y += c * q.y;\n\t          }\n\t        }\n\t        quad.x = x / strength;\n\t        quad.y = y / strength;\n\t      }\n\t\n\t      // For leaf nodes, accumulate forces from coincident quadrants.\n\t      else {\n\t        q = quad;\n\t        q.x = q.data.x;\n\t        q.y = q.data.y;\n\t        do strength += strengths[q.data.index];\n\t        while (q = q.next);\n\t      }\n\t\n\t      quad.value = strength;\n\t    }\n\t\n\t    function apply(quad, x1, _, x2) {\n\t      if (!quad.value) return true;\n\t\n\t      var x = quad.x - node.x,\n\t          y = quad.y - node.y,\n\t          w = x2 - x1,\n\t          l = x * x + y * y;\n\t\n\t      // Apply the Barnes-Hut approximation if possible.\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (w * w / theta2 < l) {\n\t        if (l < distanceMax2) {\n\t          if (x === 0) x = jiggle(), l += x * x;\n\t          if (y === 0) y = jiggle(), l += y * y;\n\t          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t          node.vx += x * quad.value * alpha / l;\n\t          node.vy += y * quad.value * alpha / l;\n\t        }\n\t        return true;\n\t      }\n\t\n\t      // Otherwise, process points directly.\n\t      else if (quad.length || l >= distanceMax2) return;\n\t\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (quad.data !== node || quad.next) {\n\t        if (x === 0) x = jiggle(), l += x * x;\n\t        if (y === 0) y = jiggle(), l += y * y;\n\t        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t      }\n\t\n\t      do if (quad.data !== node) {\n\t        w = strengths[quad.data.index] * alpha / l;\n\t        node.vx += x * w;\n\t        node.vy += y * w;\n\t      } while (quad = quad.next);\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.distanceMin = function(_) {\n\t      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n\t    };\n\t\n\t    force.distanceMax = function(_) {\n\t      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n\t    };\n\t\n\t    force.theta = function(_) {\n\t      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$2(x) {\n\t    var strength = constant(0.1),\n\t        nodes,\n\t        strengths,\n\t        xz;\n\t\n\t    if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      xz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function y$2(y) {\n\t    var strength = constant(0.1),\n\t        nodes,\n\t        strengths,\n\t        yz;\n\t\n\t    if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      yz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  exports.forceCenter = center;\n\t  exports.forceCollide = collide;\n\t  exports.forceLink = link;\n\t  exports.forceManyBody = manyBody;\n\t  exports.forceSimulation = simulation;\n\t  exports.forceX = x$2;\n\t  exports.forceY = y$2;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-quadtree/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  function tree_add(d) {\n\t    var x = +this._x.call(null, d),\n\t        y = +this._y.call(null, d);\n\t    return add(this.cover(x, y), x, y, d);\n\t  }\n\t\n\t  function add(tree, x, y, d) {\n\t    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\t\n\t    var parent,\n\t        node = tree._root,\n\t        leaf = {data: d},\n\t        x0 = tree._x0,\n\t        y0 = tree._y0,\n\t        x1 = tree._x1,\n\t        y1 = tree._y1,\n\t        xm,\n\t        ym,\n\t        xp,\n\t        yp,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return tree._root = leaf, tree;\n\t\n\t    // Find the existing leaf for the new point, or add it.\n\t    while (node.length) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n\t    }\n\t\n\t    // Is the new point is exactly coincident with the existing point?\n\t    xp = +tree._x.call(null, node.data);\n\t    yp = +tree._y.call(null, node.data);\n\t    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\t\n\t    // Otherwise, split the leaf node until the old and new point are separated.\n\t    do {\n\t      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n\t    return parent[j] = node, parent[i] = leaf, tree;\n\t  }\n\t\n\t  function addAll(data) {\n\t    var d, i, n = data.length,\n\t        x,\n\t        y,\n\t        xz = new Array(n),\n\t        yz = new Array(n),\n\t        x0 = Infinity,\n\t        y0 = Infinity,\n\t        x1 = -Infinity,\n\t        y1 = -Infinity;\n\t\n\t    // Compute the points and their extent.\n\t    for (i = 0; i < n; ++i) {\n\t      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n\t      xz[i] = x;\n\t      yz[i] = y;\n\t      if (x < x0) x0 = x;\n\t      if (x > x1) x1 = x;\n\t      if (y < y0) y0 = y;\n\t      if (y > y1) y1 = y;\n\t    }\n\t\n\t    // If there were no (valid) points, inherit the existing extent.\n\t    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n\t    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\t\n\t    // Expand the tree to cover the new points.\n\t    this.cover(x0, y0).cover(x1, y1);\n\t\n\t    // Add the new points.\n\t    for (i = 0; i < n; ++i) {\n\t      add(this, xz[i], yz[i], data[i]);\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function tree_cover(x, y) {\n\t    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\t\n\t    var x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1;\n\t\n\t    // If the quadtree has no extent, initialize them.\n\t    // Integer extent are necessary so that if we later double the extent,\n\t    // the existing quadrant boundaries don’t change due to floating point error!\n\t    if (isNaN(x0)) {\n\t      x1 = (x0 = Math.floor(x)) + 1;\n\t      y1 = (y0 = Math.floor(y)) + 1;\n\t    }\n\t\n\t    // Otherwise, double repeatedly to cover.\n\t    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n\t      var z = x1 - x0,\n\t          node = this._root,\n\t          parent,\n\t          i;\n\t\n\t      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n\t        case 0: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n\t          break;\n\t        }\n\t        case 1: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n\t          break;\n\t        }\n\t        case 2: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n\t          break;\n\t        }\n\t        case 3: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n\t          break;\n\t        }\n\t      }\n\t\n\t      if (this._root && this._root.length) this._root = node;\n\t    }\n\t\n\t    // If the quadtree covers the point already, just return.\n\t    else return this;\n\t\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    return this;\n\t  }\n\t\n\t  function tree_data() {\n\t    var data = [];\n\t    this.visit(function(node) {\n\t      if (!node.length) do data.push(node.data); while (node = node.next)\n\t    });\n\t    return data;\n\t  }\n\t\n\t  function tree_extent(_) {\n\t    return arguments.length\n\t        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n\t        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n\t  }\n\t\n\t  function Quad(node, x0, y0, x1, y1) {\n\t    this.node = node;\n\t    this.x0 = x0;\n\t    this.y0 = y0;\n\t    this.x1 = x1;\n\t    this.y1 = y1;\n\t  }\n\t\n\t  function tree_find(x, y, radius) {\n\t    var data,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1,\n\t        y1,\n\t        x2,\n\t        y2,\n\t        x3 = this._x1,\n\t        y3 = this._y1,\n\t        quads = [],\n\t        node = this._root,\n\t        q,\n\t        i;\n\t\n\t    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n\t    if (radius == null) radius = Infinity;\n\t    else {\n\t      x0 = x - radius, y0 = y - radius;\n\t      x3 = x + radius, y3 = y + radius;\n\t      radius *= radius;\n\t    }\n\t\n\t    while (q = quads.pop()) {\n\t\n\t      // Stop searching if this quadrant can’t contain a closer node.\n\t      if (!(node = q.node)\n\t          || (x1 = q.x0) > x3\n\t          || (y1 = q.y0) > y3\n\t          || (x2 = q.x1) < x0\n\t          || (y2 = q.y1) < y0) continue;\n\t\n\t      // Bisect the current quadrant.\n\t      if (node.length) {\n\t        var xm = (x1 + x2) / 2,\n\t            ym = (y1 + y2) / 2;\n\t\n\t        quads.push(\n\t          new Quad(node[3], xm, ym, x2, y2),\n\t          new Quad(node[2], x1, ym, xm, y2),\n\t          new Quad(node[1], xm, y1, x2, ym),\n\t          new Quad(node[0], x1, y1, xm, ym)\n\t        );\n\t\n\t        // Visit the closest quadrant first.\n\t        if (i = (y >= ym) << 1 | (x >= xm)) {\n\t          q = quads[quads.length - 1];\n\t          quads[quads.length - 1] = quads[quads.length - 1 - i];\n\t          quads[quads.length - 1 - i] = q;\n\t        }\n\t      }\n\t\n\t      // Visit this point. (Visiting coincident points isn’t necessary!)\n\t      else {\n\t        var dx = x - +this._x.call(null, node.data),\n\t            dy = y - +this._y.call(null, node.data),\n\t            d2 = dx * dx + dy * dy;\n\t        if (d2 < radius) {\n\t          var d = Math.sqrt(radius = d2);\n\t          x0 = x - d, y0 = y - d;\n\t          x3 = x + d, y3 = y + d;\n\t          data = node.data;\n\t        }\n\t      }\n\t    }\n\t\n\t    return data;\n\t  }\n\t\n\t  function tree_remove(d) {\n\t    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\t\n\t    var parent,\n\t        node = this._root,\n\t        retainer,\n\t        previous,\n\t        next,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1,\n\t        x,\n\t        y,\n\t        xm,\n\t        ym,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return this;\n\t\n\t    // Find the leaf node for the point.\n\t    // While descending, also retain the deepest parent with a non-removed sibling.\n\t    if (node.length) while (true) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n\t      if (!node.length) break;\n\t      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n\t    }\n\t\n\t    // Find the point to remove.\n\t    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n\t    if (next = node.next) delete node.next;\n\t\n\t    // If there are multiple coincident points, remove just the point.\n\t    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\t\n\t    // If this is the root point, remove it.\n\t    if (!parent) return this._root = next, this;\n\t\n\t    // Remove this leaf.\n\t    next ? parent[i] = next : delete parent[i];\n\t\n\t    // If the parent now contains exactly one leaf, collapse superfluous parents.\n\t    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n\t        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n\t        && !node.length) {\n\t      if (retainer) retainer[j] = node;\n\t      else this._root = node;\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function removeAll(data) {\n\t    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n\t    return this;\n\t  }\n\t\n\t  function tree_root() {\n\t    return this._root;\n\t  }\n\t\n\t  function tree_size() {\n\t    var size = 0;\n\t    this.visit(function(node) {\n\t      if (!node.length) do ++size; while (node = node.next)\n\t    });\n\t    return size;\n\t  }\n\t\n\t  function tree_visit(callback) {\n\t    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n\t    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n\t        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t      }\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function tree_visitAfter(callback) {\n\t    var quads = [], next = [], q;\n\t    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      var node = q.node;\n\t      if (node.length) {\n\t        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t      }\n\t      next.push(q);\n\t    }\n\t    while (q = next.pop()) {\n\t      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function defaultX(d) {\n\t    return d[0];\n\t  }\n\t\n\t  function tree_x(_) {\n\t    return arguments.length ? (this._x = _, this) : this._x;\n\t  }\n\t\n\t  function defaultY(d) {\n\t    return d[1];\n\t  }\n\t\n\t  function tree_y(_) {\n\t    return arguments.length ? (this._y = _, this) : this._y;\n\t  }\n\t\n\t  function quadtree(nodes, x, y) {\n\t    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n\t    return nodes == null ? tree : tree.addAll(nodes);\n\t  }\n\t\n\t  function Quadtree(x, y, x0, y0, x1, y1) {\n\t    this._x = x;\n\t    this._y = y;\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    this._root = undefined;\n\t  }\n\t\n\t  function leaf_copy(leaf) {\n\t    var copy = {data: leaf.data}, next = copy;\n\t    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n\t    return copy;\n\t  }\n\t\n\t  var treeProto = quadtree.prototype = Quadtree.prototype;\n\t\n\t  treeProto.copy = function() {\n\t    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n\t        node = this._root,\n\t        nodes,\n\t        child;\n\t\n\t    if (!node) return copy;\n\t\n\t    if (!node.length) return copy._root = leaf_copy(node), copy;\n\t\n\t    nodes = [{source: node, target: copy._root = new Array(4)}];\n\t    while (node = nodes.pop()) {\n\t      for (var i = 0; i < 4; ++i) {\n\t        if (child = node.source[i]) {\n\t          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n\t          else node.target[i] = leaf_copy(child);\n\t        }\n\t      }\n\t    }\n\t\n\t    return copy;\n\t  };\n\t\n\t  treeProto.add = tree_add;\n\t  treeProto.addAll = addAll;\n\t  treeProto.cover = tree_cover;\n\t  treeProto.data = tree_data;\n\t  treeProto.extent = tree_extent;\n\t  treeProto.find = tree_find;\n\t  treeProto.remove = tree_remove;\n\t  treeProto.removeAll = removeAll;\n\t  treeProto.root = tree_root;\n\t  treeProto.size = tree_size;\n\t  treeProto.visit = tree_visit;\n\t  treeProto.visitAfter = tree_visitAfter;\n\t  treeProto.x = tree_x;\n\t  treeProto.y = tree_y;\n\t\n\t  exports.quadtree = quadtree;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-collection/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var prefix = \"$\";\n\t\n\t  function Map() {}\n\t\n\t  Map.prototype = map.prototype = {\n\t    constructor: Map,\n\t    has: function(key) {\n\t      return (prefix + key) in this;\n\t    },\n\t    get: function(key) {\n\t      return this[prefix + key];\n\t    },\n\t    set: function(key, value) {\n\t      this[prefix + key] = value;\n\t      return this;\n\t    },\n\t    remove: function(key) {\n\t      var property = prefix + key;\n\t      return property in this && delete this[property];\n\t    },\n\t    clear: function() {\n\t      for (var property in this) if (property[0] === prefix) delete this[property];\n\t    },\n\t    keys: function() {\n\t      var keys = [];\n\t      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n\t      return keys;\n\t    },\n\t    values: function() {\n\t      var values = [];\n\t      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n\t      return values;\n\t    },\n\t    entries: function() {\n\t      var entries = [];\n\t      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n\t      return entries;\n\t    },\n\t    size: function() {\n\t      var size = 0;\n\t      for (var property in this) if (property[0] === prefix) ++size;\n\t      return size;\n\t    },\n\t    empty: function() {\n\t      for (var property in this) if (property[0] === prefix) return false;\n\t      return true;\n\t    },\n\t    each: function(f) {\n\t      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n\t    }\n\t  };\n\t\n\t  function map(object, f) {\n\t    var map = new Map;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\t\n\t    // Index array by numeric index or specified key function.\n\t    else if (Array.isArray(object)) {\n\t      var i = -1,\n\t          n = object.length,\n\t          o;\n\t\n\t      if (f == null) while (++i < n) map.set(i, object[i]);\n\t      else while (++i < n) map.set(f(o = object[i], i, object), o);\n\t    }\n\t\n\t    // Convert object to map.\n\t    else if (object) for (var key in object) map.set(key, object[key]);\n\t\n\t    return map;\n\t  }\n\t\n\t  function nest() {\n\t    var keys = [],\n\t        sortKeys = [],\n\t        sortValues,\n\t        rollup,\n\t        nest;\n\t\n\t    function apply(array, depth, createResult, setResult) {\n\t      if (depth >= keys.length) return rollup != null\n\t          ? rollup(array) : (sortValues != null\n\t          ? array.sort(sortValues)\n\t          : array);\n\t\n\t      var i = -1,\n\t          n = array.length,\n\t          key = keys[depth++],\n\t          keyValue,\n\t          value,\n\t          valuesByKey = map(),\n\t          values,\n\t          result = createResult();\n\t\n\t      while (++i < n) {\n\t        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n\t          values.push(value);\n\t        } else {\n\t          valuesByKey.set(keyValue, [value]);\n\t        }\n\t      }\n\t\n\t      valuesByKey.each(function(values, key) {\n\t        setResult(result, key, apply(values, depth, createResult, setResult));\n\t      });\n\t\n\t      return result;\n\t    }\n\t\n\t    function entries(map, depth) {\n\t      if (++depth > keys.length) return map;\n\t      var array, sortKey = sortKeys[depth - 1];\n\t      if (rollup != null && depth >= keys.length) array = map.entries();\n\t      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n\t      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n\t    }\n\t\n\t    return nest = {\n\t      object: function(array) { return apply(array, 0, createObject, setObject); },\n\t      map: function(array) { return apply(array, 0, createMap, setMap); },\n\t      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n\t      key: function(d) { keys.push(d); return nest; },\n\t      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n\t      sortValues: function(order) { sortValues = order; return nest; },\n\t      rollup: function(f) { rollup = f; return nest; }\n\t    };\n\t  }\n\t\n\t  function createObject() {\n\t    return {};\n\t  }\n\t\n\t  function setObject(object, key, value) {\n\t    object[key] = value;\n\t  }\n\t\n\t  function createMap() {\n\t    return map();\n\t  }\n\t\n\t  function setMap(map, key, value) {\n\t    map.set(key, value);\n\t  }\n\t\n\t  function Set() {}\n\t\n\t  var proto = map.prototype;\n\t\n\t  Set.prototype = set.prototype = {\n\t    constructor: Set,\n\t    has: proto.has,\n\t    add: function(value) {\n\t      value += \"\";\n\t      this[prefix + value] = value;\n\t      return this;\n\t    },\n\t    remove: proto.remove,\n\t    clear: proto.clear,\n\t    values: proto.keys,\n\t    size: proto.size,\n\t    empty: proto.empty,\n\t    each: proto.each\n\t  };\n\t\n\t  function set(object, f) {\n\t    var set = new Set;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\t\n\t    // Otherwise, assume it’s an array.\n\t    else if (object) {\n\t      var i = -1, n = object.length;\n\t      if (f == null) while (++i < n) set.add(object[i]);\n\t      else while (++i < n) set.add(f(object[i], i, object));\n\t    }\n\t\n\t    return set;\n\t  }\n\t\n\t  function keys(map) {\n\t    var keys = [];\n\t    for (var key in map) keys.push(key);\n\t    return keys;\n\t  }\n\t\n\t  function values(map) {\n\t    var values = [];\n\t    for (var key in map) values.push(map[key]);\n\t    return values;\n\t  }\n\t\n\t  function entries(map) {\n\t    var entries = [];\n\t    for (var key in map) entries.push({key: key, value: map[key]});\n\t    return entries;\n\t  }\n\t\n\t  exports.nest = nest;\n\t  exports.set = set;\n\t  exports.map = map;\n\t  exports.keys = keys;\n\t  exports.values = values;\n\t  exports.entries = entries;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-dispatch/ Version 1.0.1. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var noop = {value: function() {}};\n\t\n\t  function dispatch() {\n\t    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n\t      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n\t      _[t] = [];\n\t    }\n\t    return new Dispatch(_);\n\t  }\n\t\n\t  function Dispatch(_) {\n\t    this._ = _;\n\t  }\n\t\n\t  function parseTypenames(typenames, types) {\n\t    return typenames.trim().split(/^|\\s+/).map(function(t) {\n\t      var name = \"\", i = t.indexOf(\".\");\n\t      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n\t      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n\t      return {type: t, name: name};\n\t    });\n\t  }\n\t\n\t  Dispatch.prototype = dispatch.prototype = {\n\t    constructor: Dispatch,\n\t    on: function(typename, callback) {\n\t      var _ = this._,\n\t          T = parseTypenames(typename + \"\", _),\n\t          t,\n\t          i = -1,\n\t          n = T.length;\n\t\n\t      // If no callback was specified, return the callback of the given type and name.\n\t      if (arguments.length < 2) {\n\t        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n\t        return;\n\t      }\n\t\n\t      // If a type was specified, set the callback for the given type and name.\n\t      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n\t      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n\t      while (++i < n) {\n\t        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n\t        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n\t      }\n\t\n\t      return this;\n\t    },\n\t    copy: function() {\n\t      var copy = {}, _ = this._;\n\t      for (var t in _) copy[t] = _[t].slice();\n\t      return new Dispatch(copy);\n\t    },\n\t    call: function(type, that) {\n\t      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    },\n\t    apply: function(type, that, args) {\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    }\n\t  };\n\t\n\t  function get(type, name) {\n\t    for (var i = 0, n = type.length, c; i < n; ++i) {\n\t      if ((c = type[i]).name === name) {\n\t        return c.value;\n\t      }\n\t    }\n\t  }\n\t\n\t  function set(type, name, callback) {\n\t    for (var i = 0, n = type.length; i < n; ++i) {\n\t      if (type[i].name === name) {\n\t        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n\t        break;\n\t      }\n\t    }\n\t    if (callback != null) type.push({name: name, value: callback});\n\t    return type;\n\t  }\n\t\n\t  exports.dispatch = dispatch;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org/d3-timer/ Version 1.0.2. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var frame = 0;\n\t  var timeout = 0;\n\t  var interval = 0;\n\t  var pokeDelay = 1000;\n\t  var taskHead;\n\t  var taskTail;\n\t  var clockLast = 0;\n\t  var clockNow = 0;\n\t  var clockSkew = 0;\n\t  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n\t  var setFrame = typeof requestAnimationFrame === \"function\"\n\t          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n\t          : function(f) { setTimeout(f, 17); };\n\t  function now() {\n\t    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n\t  }\n\t\n\t  function clearNow() {\n\t    clockNow = 0;\n\t  }\n\t\n\t  function Timer() {\n\t    this._call =\n\t    this._time =\n\t    this._next = null;\n\t  }\n\t\n\t  Timer.prototype = timer.prototype = {\n\t    constructor: Timer,\n\t    restart: function(callback, delay, time) {\n\t      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n\t      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n\t      if (!this._next && taskTail !== this) {\n\t        if (taskTail) taskTail._next = this;\n\t        else taskHead = this;\n\t        taskTail = this;\n\t      }\n\t      this._call = callback;\n\t      this._time = time;\n\t      sleep();\n\t    },\n\t    stop: function() {\n\t      if (this._call) {\n\t        this._call = null;\n\t        this._time = Infinity;\n\t        sleep();\n\t      }\n\t    }\n\t  };\n\t\n\t  function timer(callback, delay, time) {\n\t    var t = new Timer;\n\t    t.restart(callback, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function timerFlush() {\n\t    now(); // Get the current time, if not already set.\n\t    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n\t    var t = taskHead, e;\n\t    while (t) {\n\t      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n\t      t = t._next;\n\t    }\n\t    --frame;\n\t  }\n\t\n\t  function wake(time) {\n\t    clockNow = (clockLast = time || clock.now()) + clockSkew;\n\t    frame = timeout = 0;\n\t    try {\n\t      timerFlush();\n\t    } finally {\n\t      frame = 0;\n\t      nap();\n\t      clockNow = 0;\n\t    }\n\t  }\n\t\n\t  function poke() {\n\t    var now = clock.now(), delay = now - clockLast;\n\t    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n\t  }\n\t\n\t  function nap() {\n\t    var t0, t1 = taskHead, t2, time = Infinity;\n\t    while (t1) {\n\t      if (t1._call) {\n\t        if (time > t1._time) time = t1._time;\n\t        t0 = t1, t1 = t1._next;\n\t      } else {\n\t        t2 = t1._next, t1._next = null;\n\t        t1 = t0 ? t0._next = t2 : taskHead = t2;\n\t      }\n\t    }\n\t    taskTail = t0;\n\t    sleep(time);\n\t  }\n\t\n\t  function sleep(time) {\n\t    if (frame) return; // Soonest alarm already set, or will be.\n\t    if (timeout) timeout = clearTimeout(timeout);\n\t    var delay = time - clockNow;\n\t    if (delay > 24) {\n\t      if (time < Infinity) timeout = setTimeout(wake, delay);\n\t      if (interval) interval = clearInterval(interval);\n\t    } else {\n\t      if (!interval) interval = setInterval(poke, pokeDelay);\n\t      frame = 1, setFrame(wake);\n\t    }\n\t  }\n\t\n\t  function timeout$1(callback, delay, time) {\n\t    var t = new Timer;\n\t    delay = delay == null ? 0 : +delay;\n\t    t.restart(function(elapsed) {\n\t      t.stop();\n\t      callback(elapsed + delay);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function interval$1(callback, delay, time) {\n\t    var t = new Timer, total = delay;\n\t    if (delay == null) return t.restart(callback, delay, time), t;\n\t    delay = +delay, time = time == null ? now() : +time;\n\t    t.restart(function tick(elapsed) {\n\t      elapsed += total;\n\t      t.restart(tick, total += delay, time);\n\t      callback(elapsed);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\t  exports.now = now;\n\t  exports.timer = timer;\n\t  exports.timerFlush = timerFlush;\n\t  exports.timeout = timeout$1;\n\t  exports.interval = interval$1;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** brambl.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d00e9d8c3595e2fdb853\n **/","// Main export\nmodule.exports = {\n  Graph: require('./js/brambl.graph.js')\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bundle.js\n **/","var d3    = require('d3-force');\n\nclass Graph {\n\n  /* Create an instance of a brambl \n   *\n   */\n  constructor(selector, data = {}, options = {}) {\n    this.selector   = selector;\n    this.options    = options;\n    this.nodes      = data.nodes || [];\n    this.edges      = data.edges || [];\n    this.container  = document.querySelector(selector);\n  }\n\n  // Lots of horrible side effects in here at the moment - this is just\n  // because the code here is largely a copy/paste job from a d3 example\n  // and this whole thing is basically just in \"bootstrapping mode\" at the \n  // moment while I get the env set up the way I want it. \n  //\n  // Don't judge me!!\n  //\n  start() {\n\n    var canvas = document.createElement('canvas');\n    container.appendChild(canvas);\n\n    var context = canvas.getContext(\"2d\");\n\n    var width = canvas.width = 1000;\n    var height = canvas.height = 500;\n\n    var simulation = d3.forceSimulation()\n        .force(\"link\", d3.forceLink().id(d => d.id))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    simulation\n        .nodes(this.nodes)\n        .on(\"tick\", redraw.bind(this));\n\n    simulation.force(\"link\")\n        .links(this.edges)\n        .distance(d =>  100);\n\n    function redraw() {\n      context.clearRect(0, 0, width, height);\n\n      context.beginPath();\n      this.edges.forEach(drawLink);\n      context.stroke();\n\n      context.beginPath();\n      this.nodes.forEach(drawNode);\n      context.fill();\n    }\n\n    function drawLink(d) {\n      context.moveTo(d.source.x, d.source.y);\n      context.lineTo(d.target.x, d.target.y);\n    }\n\n    function drawNode(d) {\n      context.moveTo(d.x + 3, d.y);\n      context.arc(d.x, d.y, 20, 0, 2 * Math.PI);\n    }\n\n  }\n  \n}\n\nmodule.exports = Graph; \n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/brambl.graph.js\n **/","// https://d3js.org/d3-force/ Version 1.0.2. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\n  (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\n}(this, function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\n\n  function center(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x(d) {\n    return d.x + d.vx;\n  }\n\n  function y(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index,\n        strength = defaultStrength,\n        strengths,\n        distance = constant(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = d3Collection.map(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$1(d) {\n    return d.x;\n  }\n\n  function y$1(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = d3Collection.map(),\n        stepper = d3Timer.timer(step),\n        event = d3Dispatch.dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$2(x) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$2(y) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  exports.forceCenter = center;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$2;\n  exports.forceY = y$2;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-force/build/d3-force.js\n ** module id = 2\n ** module chunks = 0\n **/","// https://d3js.org/d3-quadtree/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  exports.quadtree = quadtree;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-quadtree/build/d3-quadtree.js\n ** module id = 3\n ** module chunks = 0\n **/","// https://d3js.org/d3-collection/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  exports.nest = nest;\n  exports.set = set;\n  exports.map = map;\n  exports.keys = keys;\n  exports.values = values;\n  exports.entries = entries;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-collection/build/d3-collection.js\n ** module id = 4\n ** module chunks = 0\n **/","// https://d3js.org/d3-dispatch/ Version 1.0.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var noop = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  exports.dispatch = dispatch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-dispatch/build/d3-dispatch.js\n ** module id = 5\n ** module chunks = 0\n **/","// https://d3js.org/d3-timer/ Version 1.0.2. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3-timer/build/d3-timer.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}